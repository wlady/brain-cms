<?php

namespace Bump\Modules\Pictures\Tests;

use Bump\Modules\Pictures\YoutubeDataLoader;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-04-21 at 14:21:40.
 */
class YoutubeDataLoaderTest extends \Bump\Tests\BaseTest
{
    /**
     * @var YoutubeDataLoader
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new YoutubeDataLoader('YE7VzlLtp-4', 0);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Bump\Modules\Pictures\YoutubeDataLoader::__construct
     * @covers Bump\Modules\Pictures\YoutubeDataLoader::load
     */
    public function testConstructor()
    {
        $classname = '\\Bump\\Modules\\Pictures\\YoutubeDataLoader';
        // Get mock, without the constructor being called
        $mock = $this->getMockBuilder($classname)
            ->disableOriginalConstructor()
            ->getMock();
        // now call the constructor
        $reflectedClass = new \ReflectionClass($classname);
        $constructor = $reflectedClass->getConstructor();
        $constructor->invoke($mock, ['YE7VzlLtp-4', 0]);
    }

    /**
     * @covers Bump\Modules\Pictures\YoutubeDataLoader::getResult
     */
    public function testGetResult()
    {
        $res = $this->object->getResult();
        $this->assertEquals($res['id'], 'YE7VzlLtp-4');
    }

    /**
     * @covers Bump\Modules\Pictures\YoutubeDataLoader::isSuccess
     */
    public function testIsSuccess()
    {
        $res = $this->object->isSuccess();
        $this->assertTrue($res);
    }

    /**
     * @covers Bump\Modules\Pictures\YoutubeDataLoader::getHtml
     */
    public function testGetHtml()
    {
        $res = $this->object->getHtml();
        $this->assertTrue(stristr($res, '<b>Title:</b>')!==false);
    }

    /**
     * @covers Bump\Modules\Pictures\YoutubeDataLoader::getHtml
     */
    public function testEmptyGetHtml()
    {
        $this->setProperty('success', false);
        $res = $this->object->getHtml();
        $this->assertNull($res);
    }

    /**
     * @covers Bump\Modules\Pictures\YoutubeDataLoader::__get
     */
    public function testGet()
    {
        $res = $this->object->__get('id');
        $this->assertEquals($res, 'YE7VzlLtp-4');
        $res = $this->object->__get('unknown-var');
        $this->assertFalse($res);
    }

    /**
     * @covers Bump\Modules\Pictures\YoutubeDataLoader::getJsonData
     */
    public function testGetJsonData()
    {
        $foo = $this->getMethod('getJsonData');
        $var = $this->getProperty('videoUrl');
        $res = $foo->invokeArgs($this->object, [$var]);
        $this->assertNotFalse($res);
        $res = $foo->invokeArgs($this->object, ['wrong-url']);
        $this->assertFalse($res);
    }
}
