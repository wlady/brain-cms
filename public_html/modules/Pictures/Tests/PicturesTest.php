<?php

namespace Bump\Modules\Pictures\Tests;

use Bump\Core\CMS;
use Bump\Modules\Auth\Auth;
use Bump\Modules\Pictures\Pictures;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-04-21 at 14:21:39.
 */
class PicturesTest extends \Bump\Tests\BaseTest
{
    /**
     * @var Pictures
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Pictures;
        $res = (new Auth())->auth([
            'login' => 'admin',
            'password' => 'admin'
        ]);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Bump\Modules\Pictures\Pictures::init
     */
    public function testInit()
    {
        $this->object->init();
        $this->assertInstanceOf('\Bump\Modules\Pictures\Model\Picture', $this->object->model);
    }

    /**
     * @covers Bump\Modules\Pictures\Pictures::addPics
     * @covers Bump\Modules\Pictures\Pictures::_postGetRows
     */
    public function testAddPics()
    {
        CMS::Config()->request = [
            'names' => json_encode(['phpunittest.gif', 'phpunittest.jpg']),
            'folder' => '/images',
            'c_id' => 0
        ];
        $res = $this->object->addPics();
        $this->assertTrue($res['success']);
        $res = $this->object->saveRow([
            'photo' => 'http://placehold.it/120x90',
            'external' => 'true',
            'album_id' => 0
        ]);
        $this->assertTrue($res);
        $res = $this->object->saveRow([
            'photo' => 'http://placehold.it/120x100',
            'external' => 'false',
            'album_id' => 0
        ]);
        $this->assertTrue($res);
        $rows = $this->object->getRows([
            'album_id' => 0
        ]);
        $this->assertTrue(count($rows)>0);
        $foo = $this->getMethod('_postGetRows');
        $foo->invokeArgs($this->object, [&$rows]);
    }

    /**
     * @covers Bump\Modules\Pictures\Pictures::reorder
     * @covers Bump\Modules\Pictures\Pictures::_postDelRow
     */
    public function testReorder()
    {
        CMS::Config()->request['order'] = json_encode([
            1, 2
        ]);
        $res = $this->object->reorder();
        $this->assertTrue($res['success']);
        $sql = 'DELETE FROM cms_pictures WHERE album_id=0 AND photo LIKE "%phpunittest%" OR photo LIKE "%placehold.it%"';
        $this->object->db->Execute($sql);
        $foo = $this->getMethod('_postDelRow');
        $foo->invokeArgs($this->object, []);
    }

    /**
     * @covers Bump\Modules\Pictures\Pictures::getYouTubeData
     */
    public function testGetYouTubeData()
    {
        CMS::Config()->request = [
            'code' => 'YE7VzlLtp-4',
            'item' => 0
        ];
        $res = $this->object->getYouTubeData();
        $this->assertTrue($res['success']);

        CMS::Config()->request = [
            'code' => 'wrong-video-code',
            'item' => 0
        ];
        $res = $this->object->getYouTubeData();
        $this->assertFalse($res['success']);

    }

    /**
     * @covers Bump\Modules\Pictures\Pictures::addPics
     */
    public function testAddPicsException()
    {
        CMS::Config()->request = [
            'names' => json_encode(['phpunittest.gif', 'phpunittest.jpg']),
            'folder' => '/images',
            'c_id' => 0
        ];
        $this->expectedADOExceptionIn('Execute');
        $this->object->addPics();
    }

    /**
     * @covers Bump\Modules\Pictures\Pictures::reorder
     */
    public function testReorderException()
    {
        CMS::Config()->request['order'] = json_encode([
            1, 2
        ]);
        $this->expectedADOExceptionIn('Execute');
        $this->object->reorder();
    }

}
