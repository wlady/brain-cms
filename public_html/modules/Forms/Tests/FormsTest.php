<?php

namespace Bump\Modules\Forms\Tests;

use Bump\Core\CMS;
use Bump\Modules\Forms\Forms;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-04-21 at 14:21:42.
 */
class FormsTest extends \Bump\Tests\BaseTest
{
    /**
     * @var Forms
     */
    protected $object;

    protected static $newForm = null;

    public static function setUpBeforeClass()
    {
        self::$fixtures = [
            '\\Bump\\Modules\\Forms\\Tests\\Fixtures\\FormsFixture',
            '\\Bump\\Modules\\FormFields\\Tests\\Fixtures\\FormFieldsFixture',
        ];
        parent::setUpBeforeClass();
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Forms;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Bump\Modules\Forms\Forms::init
     * @covers Bump\Modules\Forms\Forms::_preSaveRow
     */
    public function testInit()
    {
        $this->object->init();
        $this->assertInstanceOf('\Bump\Modules\Forms\Model\View', $this->object->view_model);
        $this->assertInstanceOf('\Bump\Modules\Forms\Model\Form', $this->object->model);

        $sql = 'SELECT * FROM cms_forms WHERE name=?';
        $fields = $this->object->db->getRow($sql, 'PHPUnit Test Form');
        self::$newForm = $fields['id'];
        $foo = $this->getMethod('_preSaveRow');
        $foo->invokeArgs($this->object, [&$fields]);
        $this->assertTrue($fields['fields'] > 0);
     }

     /**
     * @covers Bump\Modules\Forms\Forms::getFormsArray
     */
    public function testGetFormsArray()
    {
        $rows = $this->object->getFormsArray();
        $cnt1 = count($rows);
        $this->assertTrue($cnt1 > 0);
        $rows = $this->object->getFormsArray([
            'empty' => 1
        ]);
        $cnt2 = count($rows);
        $this->assertTrue(count($cnt2) > 0);
        $this->assertTrue($cnt2 > $cnt1);
    }

    /**
     * @covers Bump\Modules\Forms\Forms::parse
     */
    public function testParse()
    {
        CMS::Config()->request = [
            'id' => self::$newForm
        ];
        $result = $this->object->parse();
        $this->assertTrue($result['success']);
        CMS::Config()->request = [
            'id' => 0
        ];
        $result = $this->object->parse();
        $this->assertFalse($result['success']);
    }

    /**
     * @covers Bump\Modules\Forms\Forms::parseInput
     */
    public function testParseInput()
    {
        CMS::Config()->request = [
            'Name' => 'Developer',
            'EMail' => 'example@example.com',
            'code' => 'TEST',
            'Agree' => 'on',
            'Message' => 'This is the first test message',
            'Methods' => [
                'Email' => 'By Email',
                'Phone' => 'By Phone',
            ],
            'Method' => 'Phone',
        ];
        $result = $this->object->parseInput(['name' => 'PHPUnit Test Form']);
        $this->assertEquals($result['vars']['Name'], 'Developer');
        // emulate AJAX request, "Field has wrong value" error
        $_SERVER['HTTP_X_REQUESTED_WITH'] = 'xmlhttprequest';
        CMS::Config()->request = [
            'Name' => 'Developer',
            'EMail' => '',
            'code' => 'TEST',
            'Message' => 'This is the first test message',
            'Methods' => [
                'Email' => 'By Email',
                'Phone' => 'By Phone',
            ],
            'Method' => 'Phone',
        ];
        $result = $this->object->parseInput(['name' => 'PHPUnit Test Form']);
        $this->assertTrue($result['error']);
        // emulate error
        $result = $this->object->parseInput(['name' => 'Unknown Form']);
        $this->assertTrue($result['error']);
    }

    /**
     * @covers Bump\Modules\Forms\Forms::showForm
     */
    public function testShowForm()
    {
        unset($_SERVER['HTTP_X_REQUESTED_WITH']);
        $data = [
            'Name' => 'Developer',
            'Message' => 'This is the first test message',
            'Methods' => [
                'Email' => 'By Email',
                'Phone' => 'By Phone',
            ],
            'Method' => 'Phone',
        ];
        $_POST = null;
        $res = $this->object->showForm(['name' => 'PHPUnit Test Form', 'fields' => $data]);
        $this->assertTrue(!empty($res));
        // emulate AJAX request
        $_SERVER['HTTP_X_REQUESTED_WITH'] = 'xmlhttprequest';
        $res = $this->object->showForm(['name' => 'PHPUnit Test Form', 'fields' => $data]);
        $this->assertTrue(!empty($res));
        // emulate "Form was not found" error
        $res = $this->object->showForm(['name' => 'Unknown Form']);
        $this->assertEquals($res, 'Form was not found');
    }

    /**
     * @covers Bump\Modules\Forms\Forms::saveParsed
     */
    public function testSaveParsed()
    {
        CMS::Config()->request = [
            'id' => self::$newForm
        ];
        $result = $this->object->saveParsed();
        $this->assertTrue($result['success']);
    }

    /**
     * @covers Bump\Modules\Forms\Forms::_preDelRow
     */
    public function testPreDelRow()
    {
        $newForm = (array)self::$newForm;

        $foo = $this->getMethod('_preDelRow');
        $foo->invokeArgs($this->object, [&$newForm]);
    }

}
