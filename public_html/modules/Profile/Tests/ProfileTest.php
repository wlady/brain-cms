<?php

namespace Bump\Modules\Profile\Tests;

use Bump\Core\CMS;
use Bump\Modules\Auth\Auth;
use Bump\Modules\Profile\Profile;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-04-21 at 14:21:39.
 */
class ProfileTest extends \Bump\Tests\BaseTest
{
    /**
     * @var Profile
     */
    protected $object;

    protected $profile = null;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Profile;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Bump\Modules\Profile\Profile::__construct
     */
    public function testConstructor()
    {
        $classname = '\\Bump\\Modules\\Profile\\Profile';
        // Get mock, without the constructor being called
        $mock = $this->getMockBuilder($classname)
            ->disableOriginalConstructor()
            ->getMock();
        // now call the constructor
        $reflectedClass = new \ReflectionClass($classname);
        $constructor = $reflectedClass->getConstructor();
        $constructor->invoke($mock);
    }

    /**
     * @covers Bump\Modules\Profile\Profile::getProfile
     * @covers Bump\Modules\Profile\Profile::_preSaveRow
     * @covers Bump\Modules\Profile\Profile::_postSaveRow
     */
    public function testGetProfile()
    {
        $res = (new Auth())->auth([
            'login' => 'admin',
            'password' => 'admin'
        ]);
        $this->profile = $this->object->getProfile();
        $this->assertTrue(is_array($this->profile));
        $_SERVER['HTTP_X_REQUESTED_WITH'] = 'xmlhttprequest';
        $res = $this->object->getProfile();
        $this->assertTrue($res['success']);
        CMS::Config()->request = [
            'metadata' => 1
        ];
        $res = $this->object->getProfile();
        $this->assertTrue($res['success'] && is_array($res['metaData']));
        $this->profile['user_password'] = 'admin';
        CMS::Config()->request = [
            'current_user' => 'admin',
        ];
        $foo = $this->getMethod('_preSaveRow');
        $res = $foo->invokeArgs($this->object, [&$this->profile]);
        $this->assertTrue(is_array($res));
        $foo = $this->getMethod('_postSaveRow');
        $foo->invokeArgs($this->object, [$this->profile, $res]);
        $this->assertTrue(is_array($res));
        // single user auth provider
        CMS::Config()->authProviders->add('Single');
        $this->profile['user_password'] = '';
        $this->profile['user_type'] = 'Single';
        $foo = $this->getMethod('_preSaveRow');
        $res = $foo->invokeArgs($this->object, [&$this->profile]);
        $this->assertTrue(is_array($res));
        CMS::Config()->authProviders->remove('Single');
    }

    /**
     * @covers Bump\Modules\Profile\Profile::_preSaveRow
     * @expectedException \Exception
     */
    public function testPreSaveException1()
    {
        $fields = ['user_type' => 'unknownType'];
        $foo = $this->getMethod('_preSaveRow');
        $foo->invokeArgs($this->object, [&$fields]);
    }

    /**
     * @covers Bump\Modules\Profile\Profile::_preSaveRow
     * @expectedException \Exception
     */
    public function testPreSaveException2()
    {
        $fields = ['user_type' => 'unknownType'];
        CMS::Config()->authProviders->providers[] = 'unknownType';
        $foo = $this->getMethod('_preSaveRow');
        $foo->invokeArgs($this->object, [&$fields]);
    }
}
