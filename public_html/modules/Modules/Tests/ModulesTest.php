<?php

namespace Bump\Modules\Modules\Tests;

use Bump\Core\CMS;
use Bump\Modules\Modules\Modules;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-04-21 at 14:21:40.
 */
class ModulesTest extends \Bump\Tests\BaseTest
{
    /**
     * @var Modules
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Modules;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Bump\Modules\Modules\Modules::init
     */
    public function testInit()
    {
        $this->object->init();
        $this->assertInstanceOf('\Bump\Modules\Modules\Model\Module', $this->object->model);
    }

    /**
     * @covers Bump\Modules\Modules\Modules::collectModules
     * @covers Bump\Modules\Modules\Modules::getModules
     */
    public function testCollectModules()
    {
        $foo = $this->getMethod('collectModules');
        $foo->invokeArgs($this->object, []);
        $foo = $this->getMethod('getModules');
        $modules = $foo->invokeArgs($this->object, []);
        $this->assertTrue(count($modules) > 0);
    }

    /**
     * @covers Bump\Modules\Modules\Modules::getRows
     * @covers Bump\Modules\Modules\Modules::_preGetRows
     * @covers Bump\Modules\Modules\Modules::_postGetRows
     * @covers Bump\Modules\Modules\Modules::_postGetRow
     */
    public function testGetRows()
    {
        // not authorized user should see modules with level '0'
        $rows = $this->object->getRows();
        foreach ($rows as $row) {
            $levels = explode(',', $row['m_levels']);
            if (!in_array(0, $levels)) {
                $this->assertFalse(true);
            }
        }
        // authorized user
        $res = (new \Bump\Modules\Auth\Auth())->auth([
            'login' => 'admin',
            'password' => 'admin'
        ]);
        $filters = [];
        $foo = $this->getMethod('_preGetRows');
        $foo->invokeArgs($this->object, [&$filters]);
        $this->assertNotFalse(array_search(100, $filters['value']));
        $rows = $this->object->getRows();
        $this->assertTrue(count($rows) > 0);
        $tmp = array_filter($rows, function ($item) {
            return $item['m_path'] == 'Albums' ? $item : null;
        });
        if (count($tmp)) {
            sort($tmp);
            $foo = $this->getMethod('_postGetRows');
            $foo->invokeArgs($this->object, [&$tmp]);
            $this->assertTrue(isset($tmp[0]['Settings']));
            unset($tmp[0]['Settings']);
            $foo = $this->getMethod('_postGetRow');
            $foo->invokeArgs($this->object, [&$tmp[0]]);
            $this->assertTrue(isset($tmp[0]['Settings']));
        }
    }

    /**
     * @covers Bump\Modules\Modules\Modules::getModulesByUserId
     * @covers Bump\Modules\Modules\Modules::getAllByUserId
     * @covers Bump\Modules\Modules\Modules::getAllActiveByUserId
     * @covers Bump\Modules\Modules\Modules::collectUserModules
     */
    public function testgetModulesByUserId()
    {
        $foo = $this->getMethod('getModulesByUserId');
        $modules = $foo->invokeArgs($this->object, [CMS::User()->getID()]);
        $this->assertTrue(count($modules) > 0);
        $foo = $this->getMethod('getAllByUserId');
        $modules = $foo->invokeArgs($this->object, [CMS::User()->getID()]);
        $this->assertTrue(count($modules) > 0);
        $foo = $this->getMethod('getAllActiveByUserId');
        $modules = $foo->invokeArgs($this->object, [CMS::User()->getID()]);
        $this->assertTrue(count($modules) > 0);
        $foo = $this->getMethod('collectUserModules');
        $modules = $foo->invokeArgs($this->object, [$modules]);
        $this->assertTrue(count($modules) > 0);
        // emulate AJAX request
        $_SERVER['HTTP_X_REQUESTED_WITH'] = 'xmlhttprequest';
        $foo = $this->getMethod('getAllByUserId');
        $modules = $foo->invokeArgs($this->object, [CMS::User()->getID()]);
        $this->assertTrue(count($modules) > 0);
        $foo = $this->getMethod('getAllActiveByUserId');
        $modules = $foo->invokeArgs($this->object, [CMS::User()->getID()]);
        $this->assertTrue(count($modules) > 0);
        // get with metadata
        CMS::Config()->request = [
            'metadata' => 1.
        ];
        $foo = $this->getMethod('getAllByUserId');
        $modules = $foo->invokeArgs($this->object, [CMS::User()->getID()]);
        $this->assertTrue(count($modules) > 0);
        $foo = $this->getMethod('getAllActiveByUserId');
        $modules = $foo->invokeArgs($this->object, [CMS::User()->getID()]);
        $this->assertTrue(count($modules) > 0);
        unset($_SERVER['HTTP_X_REQUESTED_WITH']);
    }

    /**
     * @covers Bump\Modules\Modules\Modules::saveSettings
     * @covers Bump\Modules\Modules\Modules::parseSettings
     * @covers Bump\Modules\Modules\Modules::collectUserModules
     */
    public function testSaveSettings()
    {
        CMS::Config()->request = [
            'm_path' => 'SysInfo',
            'settings' => [
                'resolve' => 'true'
            ]
        ];
        $res = $this->object->saveSettings();
        $row = $this->object->getModule('Sysinfo');
        $foo = $this->getMethod('parseSettings');
        $foo->invokeArgs($this->object, [&$row]);
        $settings = json_decode($row['Settings']);
        array_walk($settings, function ($item) {
            if ($item->name == 'settings[resolve]') {
                $this->assertTrue($item->value == 'true');
            }
        });
        // inverse flag
        CMS::Config()->request = [
            'm_path' => 'SysInfo',
            'settings' => [
                'resolve' => 'false'
            ]
        ];
        $res = $this->object->saveSettings();
        // get system module
        $row = $this->object->getModule('Profile');
        $foo = $this->getMethod('parseSettings');
        $foo->invokeArgs($this->object, [&$row]);
        $this->assertEquals($row['Status'], 'system');
        $row = $this->object->getModule('Sysinfo');
        $foo = $this->getMethod('parseSettings');
        $foo->invokeArgs($this->object, [&$row]);
        $settings = json_decode($row['Settings']);
        array_walk($settings, function ($item) {
            if ($item->name == 'settings[resolve]') {
                $this->assertEquals($item->value, 'false');
            }
        });
        // check "Depends"
        $row = $this->object->getModule('EmailLogs');
        $foo = $this->getMethod('parseSettings');
        $foo->invokeArgs($this->object, [&$row]);
        $this->assertEquals($row['Status'], 'depend');
        // try to deactivate system module
        CMS::Config()->request = [
            'm_path' => 'Profile',
            'm_active' => 'false',
        ];
        $res = $this->object->saveSettings();
        $this->assertTrue($res['success']);
        // try to deactivate non system dependant module
        CMS::Config()->request = [
            'm_path' => 'Albums',
            'm_active' => 'false',
        ];
        $res = $this->object->saveSettings();
        $this->assertTrue($res['success']);
        // collect only active modules
        $foo = $this->getMethod('getModulesByUserId');
        $modules = $foo->invokeArgs($this->object, [CMS::User()->getID()]);
        $foo = $this->getMethod('collectUserModules');
        $modules = $foo->invokeArgs($this->object, [$modules]);
        $this->assertTrue(count($modules) > 0);
        CMS::Config()->request = [
            'm_path' => 'EmailForms',
            'settings' => [
                'server' => 'localhost'
            ]
        ];
        $res = $this->object->saveSettings();
    }

    /**
     * @covers Bump\Modules\Modules\Modules::getUserModules
     */
    public function testGetUserModules()
    {
        $modules = $this->object->getUserModules();
        $this->assertTrue(count($modules) > 0);
    }

    /**
     * @covers Bump\Modules\Modules\Modules::getSelectableUserModules
     */
    public function testGetSelectableUserModules()
    {
        $modules1 = $this->object->getSelectableUserModules();
        $this->assertTrue(count($modules1) > 0);
        $modules2 = $this->object->getSelectableUserModules(true);
        $this->assertTrue(count($modules2) > 0);
    }

    /**
     * @covers Bump\Modules\Modules\Modules::getAssigned
     */
    public function testGetAssigned()
    {
        CMS::Config()->request['id'] = CMS::User()->getID();
        $modules = $this->object->getAssigned();
        $this->assertTrue(count($modules['rows']) > 0);
    }

    /**
     * @covers Bump\Modules\Modules\Modules::getActiveModules
     */
    public function testGetActiveModules()
    {
        $modules = $this->object->getActiveModules();
        $this->assertTrue(count($modules) > 0);
    }

    /**
     * @covers Bump\Modules\Modules\Modules::getUserModulesLang
     */
    public function testGetUserModulesLang()
    {
        $modules = $this->object->getUserModulesLang();
        $this->assertTrue(count($modules) > 0);
    }

    /**
     * @covers Bump\Modules\Modules\Modules::getModule
     */
    public function testGetModule()
    {
        $row = $this->object->getModule('Modules');
        $this->assertTrue(is_array($row) && $row['m_path'] == 'Modules');
    }

    /**
     * @covers Bump\Modules\Modules\Modules::reorder
     */
    public function testReorder()
    {
        CMS::Config()->request = [
            'order' => json_encode([1, 2]),
            'panel' => 'hidden'
        ];
        $res = $this->object->reorder();
        $this->assertTrue($res['success']);
    }

    /**
     * @covers Bump\Modules\Modules\Modules::getModulesArray
     */
    public function testGetModulesArray()
    {
        $res = $this->object->getModulesArray();
        $this->assertTrue(isset($res['fields']) && isset($res['data']));
    }

    /**
     * @covers Bump\Modules\Modules\Modules::getUserModulesArray
     */
    public function testGetUserModulesArray()
    {
        $res = $this->object->getUserModulesArray();
        $this->assertTrue(isset($res['fields']) && isset($res['data']));
    }

    /**
     * @covers Bump\Modules\Modules\Modules::purgeCache
     */
    public function testPurgeCache()
    {
        $res = $this->object->purgeCache();
        $this->assertTrue(isset($res['success']));
    }

    /**
     * @covers Bump\Modules\Modules\Modules::reorder
     */
    public function testReorderException()
    {
        CMS::Config()->request = [
            'order' => json_encode([1, 2]),
            'panel' => 'hidden'
        ];
        $this->expectedADOExceptionIn('Execute');
        $this->object->reorder();
    }

    /**
     * @covers Bump\Modules\Modules\Modules::saveSettings
     */
    public function testSaveSettingsException()
    {
        CMS::Config()->request = [
            'm_path' => 'SysInfo',
            'settings' => [
                'resolve' => 'true'
            ]
        ];
        $this->expectedADOExceptionIn('Execute');
        $this->object->db->expects($this->any())
            ->method('GetRow')
            ->will($this->returnValue(true));
        $this->object->saveSettings();
    }
}
