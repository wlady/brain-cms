<?php

namespace Bump\Modules\EmailForms\Tests;

use Bump\Core\CMS;
use Bump\Modules\EmailForms\EmailForms;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-04-21 at 14:21:43.
 */
class EmailFormsTest extends \Bump\Tests\BaseTest
{
    /**
     * @var EmailForms
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new EmailForms;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Bump\Modules\EmailForms\EmailForms::init
     */
    public function testInit()
    {
        $this->object->init();
        $this->assertInstanceOf('\Bump\Modules\EmailForms\Model\EmailForm', $this->object->model);
    }

    /**
     * @covers Bump\Modules\EmailForms\EmailForms::sendForm
     */
    public function testSendForm()
    {
        // Prepare the first message
        $fields = [
            'f_name' => 'The first PHPUnit Test Message',
            'f_subject' => 'Empty Subject',
            'f_template' => '<p>Hey {{ email.Name}}, {{email.Message}}</p>',
            'f_reply_subject' => 'Reply subject',
            'f_reply_content' => 'Test message was sent',
            'f_logging' => 'true',
            'f_active' => 'true',
        ];
        // emulate AJAX request
        $_SERVER['HTTP_X_REQUESTED_WITH'] = 'xmlhttprequest';
        $res = $this->object->sendForm();
        $this->assertFalse($res);

        if ($this->object->db->Replace('cms_email_forms', $fields, 'f_id', true)) {
            $data = [
                'Name' => 'Developer',
                'Message' => 'This is the first test message',
                'subject' => 'PHPUnit Test Message',
                'attachments' => [
                    [
                        'type' => 'data',
                        'name' => 'phpunittest.txt',
                        'data' => 'This is a test content'
                    ]
                ]
            ];
            if (file_exists(UPLOADDIR . '/files/test.txt')) {
                $data['attachments'][] = [
                    'type' => 'file',
                    'path' => UPLOADDIR . '/files/test.txt'
                ];
            }

            $res = $this->object->sendForm([
                'f_name' => 'The first PHPUnit Test Message',
                'to' => [CMS::Config()->MAILROOT => 'Developer'],
                'from' => [CMS::Config()->MAILROOT => 'Developer'],
                'reply' => [CMS::Config()->MAILROOT => 'Developer'],
                'fields' => $data,
            ]);
            $this->assertTrue($res);
            CMS::Config()->request = [
                'metadata' => [
                    'int' => 'true'
                ]
            ];
            $res = $this->object->sendForm([
                'f_name' => 'The first PHPUnit Test Message',
                'to' => [CMS::Config()->MAILROOT => 'Developer'],
                'from' => [CMS::Config()->MAILROOT => 'Developer'],
                'reply' => [CMS::Config()->MAILROOT => 'Developer']
            ]);
            $this->assertTrue($res);
            CMS::Config()->request = [
                'metadata' => []
            ];
        }
        // Prepare the second message
        $fields = [
            'f_cc' => 'php@unit-testing.konturlabs.com',
            'f_name' => 'The second PHPUnit Test Message',
            'f_subject' => 'Empty Subject',
            'f_template' => '<p>Hey {{ email.Name}}, {{email.Message}}</p>',
            'f_reply_content' => 'Test message was sent',
            'f_logging' => 'true',
            'f_active' => 'true',
        ];
        unset($_SERVER['HTTP_X_REQUESTED_WITH']);


        if ($this->object->db->Replace('cms_email_forms', $fields, 'f_id', true)) {
            // add static attachment
            $aId = 0;
            if (file_exists(UPLOADDIR . '/files/test.txt')) {
                $sql = 'SELECT f_id FROM cms_email_forms WHERE f_name=?';
                $aId = $this->object->db->getOne($sql, 'The second PHPUnit Test Message');
                $fields = [
                    'form_id' => $aId,
                    'a_path' => UPLOADPATH . '/files/',
                    'a_filename' => 'test.txt',
                    'a_size' => filesize(UPLOADDIR . '/files/test.txt')
                ];
                $this->object->db->Replace('cms_email_attachments', $fields, 'a_id', true);
            }
            $data = [
                'Name' => 'Developer',
                'Message' => 'This is the second test message',
                //'subject' => 'PHPUnit Test Message',
            ];

            $res = $this->object->sendForm([
                'f_name' => 'The second PHPUnit Test Message',
                'to' => [CMS::Config()->MAILROOT => 'Developer'],
                'from' => [CMS::Config()->MAILROOT => 'Developer'],
                'reply' => [CMS::Config()->MAILROOT => 'Developer'],
                'fields' => $data,
            ]);
            $this->assertTrue($res);
        }
        $res = $this->object->sendForm([
            'f_cc' => 'php@unit-testing.konturlabs.com',
            'f_name' => 'The second PHPUnit Test Message',
            'to' => [CMS::Config()->MAILROOT => 'Developer'],
            'from' => [CMS::Config()->MAILROOT => 'Developer'],
            'reply' => [CMS::Config()->MAILROOT => 'Developer'],
        ]);
        $this->assertTrue($res);
        // emulate "Form was not found" error
        $res = $this->object->sendForm([
            'f_cc' => 'php@unit-testing.konturlabs.com',
            'f_name' => 'Unknown PHPUnit Test Message',
            'to' => [CMS::Config()->MAILROOT => 'Developer'],
            'from' => [CMS::Config()->MAILROOT => 'Developer'],
            'reply' => [CMS::Config()->MAILROOT => 'Developer'],
        ]);
        $res = $this->object->sendForm();
        $this->assertFalse($res);
        // emulate AJAX request
        $_SERVER['HTTP_X_REQUESTED_WITH'] = 'xmlhttprequest';
        $res = $this->object->sendForm([
            'f_cc' => 'php@unit-testing.konturlabs.com',
            'f_name' => 'Unknown PHPUnit Test Message',
            'to' => [CMS::Config()->MAILROOT => 'Developer'],
            'from' => [CMS::Config()->MAILROOT => 'Developer'],
            'reply' => [CMS::Config()->MAILROOT => 'Developer'],
        ]);
        $res = $this->object->sendForm();
        $this->assertFalse($res);
    }

    /**
     * @covers Bump\Modules\EmailForms\EmailForms::getFormsArray
     */
    public function testGetFormsArray()
    {
        $rows = $this->object->getFormsArray();
        $cnt1 = count($rows);
        $this->assertTrue($cnt1 > 0);
        $rows = $this->object->getFormsArray([
            'empty' => 1
        ]);
        $cnt2 = count($rows);
        $this->assertTrue(count($cnt2) > 0);
        $this->assertTrue($cnt2 > $cnt1);
        // clear tables
        $sql = 'SELECT f_id FROM cms_email_forms WHERE f_name=?';
        $aId = $this->object->db->getOne($sql, 'The first PHPUnit Test Message');
        $sql = 'DELETE FROM cms_email_forms WHERE f_id=?';
        $this->object->db->Execute($sql, $aId);
        $sql = 'DELETE FROM cms_email_logs WHERE form_id=?';
        $this->object->db->Execute($sql, $aId);
        $sql = 'DELETE FROM cms_email_forms WHERE f_name=?';
        $this->object->db->Execute($sql, 'The second PHPUnit Test Message');
        $sql = 'DELETE FROM cms_email_attachments WHERE form_id=?';
        $this->object->db->Execute($sql, $aId);
        $sql = 'DELETE FROM cms_email_logs WHERE form_id=?';
        $this->object->db->Execute($sql, $aId);
    }
}
