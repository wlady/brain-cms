<?php

namespace Bump\Modules\SeoMetaDatasFields\Tests;

use Bump\Core\CMS;
use Bump\Modules\SeoMetaDatasFields\SeoMetaDatasFields;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-04-21 at 14:21:41.
 */
class SeoMetaDatasFieldsTest extends \Bump\Tests\BaseTest
{
    /**
     * @var SeoMetaDatasFields
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new SeoMetaDatasFields;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Bump\Modules\SeoMetaDatasFields\SeoMetaDatasFields::init
     */
    public function testInit()
    {
        $this->object->init();
        $this->assertInstanceOf('\Bump\Modules\SeoMetaDatasFields\Model\SeoMetaDatasField', $this->object->model);
    }

    /**
     * @covers Bump\Modules\SeoMetaDatasFields\SeoMetaDatasFields::delRow
     */
    public function testDelRow()
    {
        // save test field
        $rec = new \stdClass();
        $rec->f_xtype = 'textfield';
        $rec->f_xname = 'phpunittest';
        $rec->f_xlabel = 'Field Label';
        $rec->custom = 'true';
        CMS::Config()->request['record'] = json_encode($rec);
        $res = $this->object->saveRec();
        $this->assertTrue($res);
        $rows = $this->object->getRows([
            'f_xname' => 'phpunittest'
        ]);
        $ids = [];
        array_walk($rows, function($item) use (&$ids) {
            $ids[] = $item['id'];
        });
        $res = $this->object->delRow([
            'id' => json_encode($ids)
        ]);
    }

    /**
     * @covers Bump\Modules\SeoMetaDatasFields\SeoMetaDatasFields::delRow
     */
    public function testDelRowAjax()
    {
        // save test field
        $rec = new \stdClass();
        $rec->f_xtype = 'textfield';
        $rec->f_xname = 'phpunittest';
        $rec->f_xlabel = 'Field Label';
        $rec->custom = 'true';
        CMS::Config()->request['record'] = json_encode($rec);
        $res = $this->object->saveRec();
        $this->assertTrue($res);
        $rows = $this->object->getRows([
            'f_xname' => 'phpunittest'
        ]);
        $ids = [];
        array_walk($rows, function($item) use (&$ids) {
            $ids[] = $item['id'];
        });
        $_SERVER['HTTP_X_REQUESTED_WITH'] = 'xmlhttprequest';
        $res = $this->object->delRow([
            'id' => json_encode($ids)
        ]);
        $this->assertTrue($res['success']);
        unset($_SERVER['HTTP_X_REQUESTED_WITH']);
    }

    /**
     * @covers Bump\Modules\SeoMetaDatasFields\SeoMetaDatasFields::getTypes
     */
    public function testGetTypes()
    {
        $typess = $this->object->getTypes();
        $this->assertTrue(count($typess)>0);
    }

    /**
     * @covers Bump\Modules\SeoMetaDatasFields\SeoMetaDatasFields::getTypesLabels
     */
    public function testGetTypesLabels()
    {
        $rows = $this->object->getTypesLabels();
        $cnt1 = count($rows);
        $this->assertTrue($cnt1>0);
        $rows = $this->object->getTypesLabels([
            'empty' => 1
        ]);
        $cnt2 = count($rows);
        $this->assertTrue(count($cnt2)>0);
        $this->assertTrue($cnt2>$cnt1);
    }

    /**
     * @covers Bump\Modules\SeoMetaDatasFields\SeoMetaDatasFields::reorder
     * @covers Bump\Modules\SeoMetaDatasFields\SeoMetaDatasFields::_postGetRows
     */
    public function testReorder()
    {
        $rows = $this->object->getRows();
        $ids = [];
        array_walk($rows, function(&$item) use (&$ids) {
            $ids[] = $item['id'];
            // sanitize name
            $item['f_xname'] = substr($item['f_xname'], 3);
        });
        CMS::Config()->request['clear'] = 1;
        $foo = $this->getMethod('_postGetRows');
        $foo->invokeArgs($this->object, [&$rows]);
        CMS::Config()->request['clear'] = 0;
        // restore names
        $foo = $this->getMethod('_postGetRows');
        $foo->invokeArgs($this->object, [&$rows]);
        $old = $ids;
        rsort($ids);
        $first = array_shift($ids);
        array_unshift($ids, $first);
        $last = array_pop($old);
        array_push($old, $last);
        CMS::Config()->request['order'] = json_encode($ids);
        $res = $this->object->reorder();
        $this->assertTrue($res['success']);
        $row = $this->object->getRow([
            'f_xorder' => 0
        ]);
        $this->assertEquals($row['id'], $first);
        CMS::Config()->request['order'] = json_encode($old);
        $res = $this->object->reorder();
        $this->assertTrue($res['success']);
    }

    /**
     * @covers Bump\Modules\SeoMetaDatasFields\SeoMetaDatasFields::reorder
     */
    public function testReorderException()
    {
        $this->expectedADOExceptionIn('Execute');
        $this->object->reorder();
    }
}
