<?php

namespace Bump\Modules\Users\Tests;

use Bump\Core\CMS;
use Bump\Modules\Auth\Auth;
use Bump\Modules\Users\Users;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-04-21 at 14:21:41.
 */
class UsersTest extends \Bump\Tests\BaseTest
{
    /**
     * @var Users
     */
    protected $object;

    public static function setUpBeforeClass()
    {
        self::$fixtures = [
            'Bump\\Modules\\Users\\Tests\\Fixtures\\UsersFixture'
        ];

        parent::setUpBeforeClass();
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Users;
        $res = (new Auth())->auth([
            'login' => 'admin',
            'password' => 'admin'
        ]);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $res = (new Auth())->unAuth();
    }

    /**
     * @covers Bump\Modules\Users\Users::init
     */
    public function testInit()
    {
        $this->object->init();
        $this->assertInstanceOf('\Bump\Modules\Users\Model\User', $this->object->model);
    }

    /**
     * @covers Bump\Modules\Users\Users::getRows
     */
    public function testGetRows()
    {
        $rows = $this->object->getRows();
        $this->assertTrue(count($rows)>0);
    }

    /**
     * @covers Bump\Modules\Users\Users::_postGetRow
     */
    public function testPostGetRow()
    {
        $row = $this->object->getRow();
        $foo = $this->getMethod('_postGetRow');
        // pre-fill these fields
        $row['user_password'] = 'password';
        $foo->invokeArgs($this->object, [&$row]);
        $this->assertFalse(isset($item['user_password']));
    }

    /**
     * @covers Bump\Modules\Users\Users::_postGetRows
     */
    public function testPostGetRows()
    {
        $rows = $this->object->getRows();
        $foo = $this->getMethod('_postGetRows');
        // pre-fill these fields
        array_walk($rows, function(&$item) {
            $item['user_password'] = 'password';
            $item['user_modules'] = '';
        });
        $foo->invokeArgs($this->object, [&$rows]);
        // check the fields again
        array_walk($rows, function($item) {
            $this->assertFalse(isset($item['user_password']));
            $this->assertFalse($item['user_modules'] == '');
        });
    }

    /**
     * @covers Bump\Modules\Users\Users::_preSaveRow
     */
    public function testPreSaveRow()
    {
        CMS::Config()->authProviders->add('Test');
        $user = [
            'user_id' => '',
            'user_login' => 'phpunit',
            'user_password' => 'phpunit',
            'user_type' => 'Test',
            'user_name' => 'phpunit',
            'user_email' => 'phpunit@example.com',
            'ug_id' => 1,
        ];
        $foo = $this->getMethod('_preSaveRow');
        $foo->invokeArgs($this->object, [&$user]);
        $this->assertFalse(isset($user['user_login']));
        CMS::Config()->authProviders->remove('Test');
    }

    /**
     * @covers Bump\Modules\Users\Users::_preSaveRow
     * @expectedException \Exception
     */
    public function testPreSaveRowException1()
    {
        $foo = $this->getMethod('_preSaveRow');
        $foo->invokeArgs($this->object, []);
    }

    /**
     * @covers Bump\Modules\Users\Users::_preSaveRow
     * @expectedException \Exception
     */
    public function testPreSaveRowException2()
    {
        CMS::Config()->authProviders->add('Single');
        $user = [
            'user_id' => '',
            'user_login' => 'phpunit',
            'user_password' => 'phpunit',
            'user_type' => 'Single',
            'user_name' => 'phpunit',
            'user_email' => 'phpunit@example.com',
            'ug_id' => 1,
        ];
        $foo = $this->getMethod('_preSaveRow');
        $foo->invokeArgs($this->object, [&$user]);
        CMS::Config()->authProviders->remove('Single');
    }

    /**
     * @covers Bump\Modules\Users\Users::_preSaveRow
     * @expectedException \Exception
     */
    public function testPreSaveRowException3()
    {
        CMS::Config()->authProviders->add('UnClass');
        $user = [
            'user_id' => '',
            'user_login' => 'phpunit',
            'user_password' => 'phpunit',
            'user_type' => 'UnClass',
            'user_name' => 'phpunit',
            'user_email' => 'phpunit@example.com',
            'ug_id' => 1,
        ];
        $foo = $this->getMethod('_preSaveRow');
        $foo->invokeArgs($this->object, [&$user]);
        CMS::Config()->authProviders->remove('UnClass');
    }

    /**
     * @covers Bump\Modules\Users\Users::_preSaveRow
     */
    public function testPreSaveRowPasswordNotEmpty()
    {
        $user = [
            'user_id' => 1,
            'user_login' => 'phpunit',
            'user_password' => '123456',
            'user_type' => 'Users',
            'user_name' => 'phpunit',
            'user_email' => 'phpunit@example.com',
            'ug_id' => 1,
        ];
        $foo = $this->getMethod('_preSaveRow');
        $res = $foo->invokeArgs($this->object, [&$user]);
        $this->assertEquals($res['user_password'], $user['user_password']);
    }

    /**
     * @covers Bump\Modules\Users\Users::_preSaveRow
     * @covers Bump\Modules\Users\Users::_postSaveRow
     * @covers Bump\Modules\Users\Users::saveAllowedModules
     * @covers Bump\Modules\Users\Users::saveProfile
     */
    public function testPostSaveRow()
    {
        $user = [
            'user_id' => 0,
            'user_login' => 'phpunit',
            'user_password' => 'phpunit',
            'user_type' => 'Users',
            'user_name' => 'phpunit',
            'user_email' => 'phpunit@example.com',
            'ug_id' => 1,
        ];
        $foo = $this->getMethod('_preSaveRow');
        $foo->invokeArgs($this->object, [&$user]);
        $this->assertTrue(isset($user['user_registered']));
        $res = $this->object->saveRow($user);
        if (!$res) {
            $this->assertTrue($res);
            return;
        }
        $odds['user_password'] = 'phpunit';
        $odds['user_login'] = 'phpunit';
        $foo = $this->getMethod('_postSaveRow');
        $foo->invokeArgs($this->object, [&$user, $odds]);
        $this->assertTrue(isset($user['user_registered']));
        $row = $this->object->getRow([
            'user_name' => 'phpunit'
        ]);
        $foo = $this->getMethod('saveProfile');
        $row['user_hash'] = md5($row['user_login'] . $row['user_type']);
        $foo->invokeArgs($this->object, [$row]);
        $this->assertTrue(true);
        CMS::Config()->request['assigned'] = json_encode([
            [1, true],
            [2, true],
            [3, false],
        ]);
        $foo = $this->getMethod('saveAllowedModules');
        $foo->invokeArgs($this->object, [$row['user_id']]);
    }

    /**
     * @covers Bump\Modules\Users\Users::authenticateUser
     */
    public function testAuthenticateUser()
    {
        $user = [
            'user_id' => 0,
            'user_login' => 'phpunit',
            'user_password' => 'phpunit',
            'user_type' => 'Users',
            'user_name' => 'phpunit',
            'user_email' => 'phpunit@example.com',
            'ug_id' => 1,
        ];
        $res = $this->object->authenticateUser([
            'login' => 'admin',
            'password' => 'admin'
        ]);
        $this->assertTrue(is_array($res));
        $res = $this->object->authenticateUser([
            'login' => 'admin',
            'password' => 'bad_pass'
        ]);
        $this->assertFalse($res);
        $foo = $this->getMethod('_preSaveRow');
        $foo->invokeArgs($this->object, [&$user]);
        $row = $this->object->getRow([
            'user_name' => 'phpunit'
        ]);
        $this->object->db->Execute('UPDATE cms_users_profiles SET u_settings=NULL WHERE u_login="phpunit"');
        $this->object->authenticateUser([
            'login' => 'phpunit',
            'password' => 'phpunit'
        ]);
        $this->object->db->Execute('DELETE FROM cms_users WHERE user_id=?', $row['user_id']);
        $this->object->db->Execute('DELETE FROM cms_users_modules WHERE id=?', $row['user_id']);
        $this->object->db->Execute('DELETE FROM cms_users_profiles WHERE u_login="phpunit"');
    }
}
