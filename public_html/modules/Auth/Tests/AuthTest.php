<?php

namespace Bump\Modules\Auth\Tests;

use Bump\Modules\Auth\Auth;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-04-21 at 14:21:40.
 */
class AuthTest extends \Bump\Tests\BaseTest
{
    /**
     * @var Auth
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Auth([
            'Users',
            'Jira',
            'Fogbugz'
        ]);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Bump\Modules\Auth\Auth::__construct
     */
    public function testConstructor()
    {
        $classname = '\\Bump\\Modules\\Auth\\Auth';
        // Get mock, without the constructor being called
        $mock = $this->getMockBuilder($classname)
            ->disableOriginalConstructor()
            ->getMock();
        // now call the constructor
        $reflectedClass = new \ReflectionClass($classname);
        $constructor = $reflectedClass->getConstructor();
        $constructor->invoke($mock);
    }

    /**
     * @covers Bump\Modules\Auth\Auth::add
     * @covers Bump\Modules\Auth\Auth::remove
     */
    public function testRemove()
    {
        $this->object->add('Test');
        $this->assertTrue(count($this->object->providers)>3);
        $this->object->remove('Test');
        $this->assertTrue(count($this->object->providers)==3);
    }

    /**
     * @covers Bump\Modules\Auth\Auth::auth
     */
    public function testAuth()
    {
        $res = $this->object->auth([
            'login' => 'admin',
            'password' => ''
        ]);
        $this->assertFalse(isset($res['success']) && $res['success']);
        $res = $this->object->auth([
            'login' => 'admin',
            'password' => 'admin'
        ]);
        $this->assertTrue(isset($res['success']) && $res['success']);
        $res = $this->object->auth([
            'login' => 'users:admin',
            'password' => 'admin'
        ]);
        $this->assertTrue(isset($res['success']) && $res['success']);
    }

    /**
     * @covers Bump\Modules\Auth\Auth::isAuth
     */
    public function testIsAuth()
    {
        $res = $this->object->isAuth();
        $this->assertTrue(isset($res['success']) && $res['success']);
    }

    /**
     * @covers Bump\Modules\Auth\Auth::unAuth
     * @covers Bump\Modules\Auth\Auth::isAuth
     */
    public function testUnAuth()
    {
        $res = $this->object->unAuth();
        $this->assertTrue(isset($res['success']) && $res['success']);
        $res = $this->object->isAuth();
        $this->assertFalse(isset($res['success']) && $res['success']);
        $res = $this->object->isAuth();
        $this->assertTrue(empty($res['success']));
    }

    /**
     * @covers Bump\Modules\Auth\Auth::checkAccess
     */
    public function testCheckAccess()
    {
        $this->assertTrue($this->object->checkAccess());
    }
}
