#!/usr/bin/php -q
<?php

if (PHP_VERSION_ID < 50500) {
    die('Use PHP 5.5+');
}

define('INIT_ENV', true);

if (file_exists(__DIR__ . '/engine/bootstrap.php')) {
    include_once __DIR__ . '/engine/bootstrap.php';
} else {
    die("Can't find ./engine/bootstrap.php file.\n\n");
}

if (!function_exists('readline')) {
    function readline($prompt='') {
        echo $prompt;
        $o = '';
        $c = '';
        if( strtoupper (substr(PHP_OS, 0,3)) == 'WIN' ) {
            while ($c != "\r" && $c != "\n") {
                $o .= $c;
                $c = fread(STDIN, 1);
            }
        } else {
            while ($c != "\n") {
                $o .= $c;
                $c = fread(STDIN, 1);
            }
        }
        fgetc(STDIN);
        return $o;
    }

    function readline_read_history($data) {
        return false;
    }

    function readline_add_history($data) {
        return false;
    }

    function readline_write_history($data) {
        return false;
    }
}
//state
function sort_state_asc($arr1, $arr2)
{
    return strnatcasecmp($arr1['state'], $arr2['state']);
}
function sort_state_desc($arr1, $arr2)
{
    return sort_state_asc($arr1, $arr2) * (-1);
}

//path
function sort_path_asc($arr1, $arr2)
{
    return strnatcasecmp($arr1['Path'], $arr2['Path']);
}
function sort_path_desc($arr1, $arr2)
{
    return sort_path_asc($arr1, $arr2) * (-1);
}

//title
function sort_title_asc($arr1, $arr2)
{
    return strnatcasecmp($arr1['Title'], $arr2['Title']);
}
function sort_title_desc($arr1, $arr2)
{
    return sort_title_asc($arr1, $arr2) * (-1);
}

class Shell {

    const BCMSVERSION = '7.0';
    const BANNER = "BCMS Shell 7.0 by Vladimir Zabara <wlady@konturlabs.com> (Apr 25, 2016)\n\n";
    const TYPEHELP = "Type ? for help\n";
    const HISTORYFILE = '/.bcmsshell.history';
    const GOODBYE = "\nThank you for using BCMS Shell.\nGood bye!\n";
    const DS = DIRECTORY_SEPARATOR;
    const MODULE_GRID_STUB = '';
    const MODULE_TREE_STUB = '';
    const MODULE_HELPER_STUB = '';
    const MODULE_GEN_GRID_STUB = '';
    const INSTALLER_STUB = '';
    const ARCHNAME = 'bumpcms';

    public $opts = ['ans' => ''];
    public $argv = [];
    public $argc = 0;
    public $line = '';
    public $inputs = [];
    public $pairs = [];
    public $cmd = '';
    public $run = '';
    public $db = null;
    public $config = null;
    public $prompt = '';
    public $module = '';
    public $iniDirectives = [];
    public $commands = [
        '' => [
            'quit' => ['q', 'exit', 'e', 'die'],
            'help' => ['?', 'h'],
            'paths' => [],
            'groups' => ['group', 'grp', 'grps', 'g'],
            'users' => ['u'],
            'password' => [],
            'settings' => ['s'],
            'run' => ['r'],
            'config' => ['c'],
            'cgroups' => ['cg'],
            'make' => [],
            'gather' => [],
            'dump' => [],
            'modules' => ['mod', 'm'],
        ],
        'modules' => [
            'quit' => ['q', 'die'],
            'exit' => ['e'],
            'help' => ['?', 'h'],
            'generate' => [],
            'create' => [],
            'list' => ['lst', 'l', 'clear', 'clr'],
            'use' => [],
            'config' => ['c'],
            'schema' => [],
            'delete' => ['del'],
            'kill' => ['k'],
        ],
    ];

    public function __construct($argv)
    {
        if (!file_exists(__DIR__ . '/.bcmsshell')) {
            file_put_contents(__DIR__ . "/.bcmsshell",
                "MYSQL_EXECUTABLE=/usr/bin/mysql\n".
                "MYSQLDUMP_EXECUTABLE=/usr/bin/mysqldump\n".
                "PHPUNIT_EXECUTABLE=/usr/bin/phpunit\n".
                "PHPUNIT_SKELGEN=vendor/phpunit/phpunit-skeleton-generator/phpunit-skelgen\n".
                "PHPMETRICS_EXECUTABLE=vendor/halleck45/phpmetrics/bin/phpmetrics\n".
                "PHING_EXECUTABLE=vendor/phing/phing/bin/phing\n".
                "ALLURE_EXECUTABLE=/usr/local/bin/allure\n".
                "DOCUMENTROOTDIR=public_html\n\n".
                "SETTINGSDIR=.\n\n".
                "; Directories to be created\n\n".
                "[Create]\n".
                "create[]=data\n".
                "create[]=public_html/userfiles\n".
                "create[]=public_html/userfiles/files\n".
                "create[]=public_html/userfiles/flash\n".
                "create[]=public_html/userfiles/images\n".
                "create[]=public_html/userfiles/media\n\n".
                "; Files to be copied.\n".
                "; Asterisk can be used only to denote file names\n".
                "; and can be exist only at the end of the line\n\n".
                "[Files]\n".
                "file[]=public_html/*\n".
                "file[]=INSTALL\n".
                "file[]=README\n".
                "file[]=composer.json\n".
                "file[]=components.json\n".
                "file[]=bcmsshell\n\n".
                "; Directories to be recursively copied along with any files.\n".
                "; NOTE: 'engine' and 'modules' directories are copied by default\n\n".
                "[Recursive]\n".
                ";dir[]=/public_html/userfiles\n".
                "dir[]=/public_html/installer\n".
                "dir[]=/public_html/modules\n".
                "dir[]=/public_html/tpl\n".
                "dir[]=/public_html/js\n".
                "dir[]=/public_html/css\n".
                "dir[]=/public_html/min\n"
            );
        }

        array_shift($argv);

        $opts = getopt('', ['ans:']);

        $this->opts = array_merge($this->opts, $opts);

        foreach ($opts as $key => $value) {
            $pos = array_search('--' . $key . '=' . $value, $argv);
            if ($pos !== false) {
                array_splice($argv, $pos, 1);
                continue;
            }
            $pos = array_search('--' . $key, $argv);
            if ($pos !== false) {
                if ($value) {
                    array_splice($argv, $pos + 1, 1);
                }
                array_splice($argv, $pos, 1);
            }
        }

        $this->argv = $argv;
        $this->argc = count($argv);

        $this->db = (new \Bump\AdoDB\Recordset())->db;
        //$this->config = \Bump\Core\CMS::Config();

        $this->iniDirectives = parse_ini_file(__DIR__ . '/.bcmsshell');

        if (!$this->argc) {
            echo self::BANNER . self::TYPEHELP;
        }

        readline_read_history(__DIR__ . self::HISTORYFILE);

        $this->run();

        readline_write_history(__DIR__ . self::HISTORYFILE);

        $this->db->CacheFlush();
        //$this->config->cache->flush();

        if (!$this->argc) {
            echo self::GOODBYE;
        }

    }

    public function run()
    {
        while (!$this->argc || count($this->argv)) {
            $this->line = $this->readline($this->prompt . ($this->module? ':' . $this->module: '') . '> ');
            $this->inputs = explode(' ', $this->line);
            $this->cmd = $this->run = array_shift($this->inputs);

            if (!$this->run) {
                continue;
            }

            if (!isset($this->commands[$this->prompt][$this->run])) {
                foreach($this->commands[$this->prompt] as $command => $aliases) {
                    if (in_array($this->run, $aliases)) {
                        $this->run = $command;
                        break;
                    }
                }
            }

            $this->pairs = $this->parseArgs($this->line);

            if (method_exists($this, $this->run . ucfirst($this->prompt) . 'Cmd')) {
                if ($this->{$this->run . ucfirst($this->prompt) . 'Cmd'}()) {
                    break;
                }
            } else {
                system($this->line);
            }

            readline_add_history($this->line);

        }
    }

    public function readline($prompt)
    {
        if ($this->argc) {
            return array_shift($this->argv);
        } else {
            return readline($prompt);
        }
    }

    public function ask($ask='', $default='')
    {
        if ($this->argc && $this->opts['ans']) {
            return $this->opts['ans'];
        } else {
            return readline($ask);
        }
    }

    public function parseArgs($line)
    {
        $pairs = [];
        if (preg_match_all('~(\w+):=*[^:=]~i', $line, $mm, PREG_OFFSET_CAPTURE)) {
            $nums = count($mm[1]);
            foreach ($mm[1] as $key => $offs) {
                $attr = $offs[0];
                $len = strlen($attr);
                if ($key < $nums - 1) {
                    $val = substr($line, $offs[1]+$len+2, $mm[1][$key+1][1]-$offs[1]-$len-2);
                } else {
                    $val = substr($line, $offs[1]+$len+2);
                }
                $val = trim($val);
                if ($val[0] == '"' && $val[strlen($val)-1] == '"') {
                    $val = substr($val, 1, -1);
                }
                $pairs[$attr] = $val;
            }
        }
        return $pairs;
    }

    public function parseSQL($file) {
        $sqls = [];
        $str = file_get_contents($file);
        if (preg_match_all('~(create )|(drop )|(alter )~is', $str, $matches, PREG_OFFSET_CAPTURE)) {
            while ($el = array_pop($matches[0])) {
                $sql = substr($str, $el[1]);
                $str = substr($str, 0, $el[1]);
                $sql = rtrim(str_replace("\n", ' ', trim($sql)), ';') . ';';
                list($type, $table) = $this->getSQLType($sql);
                if (!is_array($sqls[$type][$table])) {
                    $sqls[$type][$table] = [];
                }
                array_unshift($sqls[$type][$table], $sql);
            }
        }
        return $sqls;
    }

    function getSQLType($sql) {
        $type = 'other';
        $table = '';
        if (preg_match('~DROP TABLE IF EXISTS [`]?(.*[^`])[`]?;~is', $sql, $mm)) {
            $type = 'drop';
            $table = $mm[1];
        } else if (preg_match('~CREATE TABLE( IF NOT EXISTS)? `?([a-zA-Z0-9-_]+)`?~is', $sql, $mm)) {
            $type = 'create';
            $table = $mm[2];
        } else if (preg_match('~ALTER TABLE `?([a-zA-Z0-9-_]+)`?~is', $sql, $mm)) {
            $type = 'alter';
            $table = $mm[1];
        } else if (preg_match('~SQL SECURITY (INVOKER|DEFINER) VIEW `?([a-zA-Z0-9-_]+)`?~is', $sql, $mm)) {
            $type = 'view';
            $table = $mm[2];
        }
        return [$type, $table];
    }

    public function remove($directory, $empty=false) {
        if (substr($directory,-1) == '/') {
            $directory = substr($directory,0,-1);
        }
        if (!file_exists($directory) || !is_dir($directory)) {
            return false;
        } else if (!is_readable($directory)) {
            return false;
        } else {
            $handle = opendir($directory);
            while (false !== ($item = readdir($handle))) {
                if ($item != '.' && $item != '..') {
                    $path = $directory . self::DS . $item;
                    if (is_dir($path)) {
                        $this->remove($path);
                    } else {
                        unlink($path);
                    }
                }
            }
            closedir($handle);
            if ($empty == false) {
                if (!rmdir($directory)) {
                    return false;
                }
            }
            return true;
        }
    }

    function copy($path, $dest) {
        if (is_dir($path)) {
            @mkdir($dest);
            chmod($dest, 0755);
            $objects = scandir($path);
            if (sizeof($objects) > 0) {
                foreach( $objects as $file ) {
                    if ($file == '.' || $file == '..') {
                        continue;
                    }
                    if(is_dir($path . self::DS . $file)) {
                        $this->copy($path . self::DS . $file, $dest . self::DS . $file);
                    } else {
                        copy($path . self::DS . $file, $dest . self::DS . $file);
                        chmod($dest . self::DS . $file, 0644);
                    }
                }
            }
            return true;
        } elseif (is_file($path)) {
            copy($path, $dest);
            chmod($dest, 0644);
            return true;
        }
        return false;
    }

    /**
     * Contains blocks 'dump' SQL queries which can be sorted while processing.
     *
     * @var array
     */
    protected $dumpSQLsBlocks = [];

    /**
     * Contains information about all of module's 'schema' and 'dump' SQLs queries which ordered by module name.
     * 'schema' is an array which contains devided queries.
     * 'dump' contains blocks of queries as string which taken from certain dump file:
     *
     * $sqlsByModules = [
     *      'moduleName' => [
     *          'schema' => ['...', ...],
     *          'dump' => '...'
     *      ],
     *      ...
     * ]
     *
     * @var array
     */
    protected $sqlsByModules = [];

    /**
     * Converts result which was given from "parseSQL()" into the dimensional array of queries.
     *
     * @param array $parsedSQL An array which was given from "parseSQL()" function.
     * @return array An array of SQLs commands.
     */
    protected function parsedSQLToArray(array $parsedSQL)
    {
        $converted = [];

        foreach ($parsedSQL as $type => $table) {
            foreach ($table as $tableName => $sqls) {
                $converted = array_merge($converted, $sqls);
            }
        }

        return $converted;
    }

    /**
     * Seeking for a module name, which contains obtained certain schema SQL query.
     *
     * @param string $sql Schema SQL string.
     * @return bool|string Module name or false otherwise.
     */
    protected function findModuleNameBySchemeSQL($sql)
    {
        foreach ($this->sqlsByModules as $moduleName => $moduleSQL) {
            // Module doesn't contain schema file.
            if (!isset($moduleSQL['schema'])) {
                continue;
            }

            foreach ($moduleSQL['schema'] as $moduleSchemaSql) {
                if ($sql === $moduleSchemaSql) {
                    return $moduleName;
                }
            }
        }

        return false;
    }

    /**
     * Used for moving of block with 'dump' queries to the end of all 'dump' blocks.
     * The schema sql query is used as key for finding necessary
     * module and 'dump' queries inside the module.
     *
     * @param string $sql Schema sql string.
     */
    protected function moveDownRelatedDump($sql)
    {
        $moduleName = $this->findModuleNameBySchemeSQL($sql);

        if (!$moduleName || !isset($this->sqlsByModules[$moduleName]['dump'])) {
            return;
        }

        $moduledumpSQLsBlocks = $this->sqlsByModules[$moduleName]['dump'];

        $keyIndex = array_search($moduledumpSQLsBlocks, $this->dumpSQLsBlocks);

        if (!$keyIndex) {
            return;
        }

        // Moving found dump block to the end of all blocks.
        $tmp = $this->dumpSQLsBlocks[$keyIndex];
        unset($this->dumpSQLsBlocks[$keyIndex]);
        array_push($this->dumpSQLsBlocks, $tmp);
    }

    function collectSQLs($module, $getFormDB = false)
    {
        $this->sqlsByModules[$module] = [];

        $sqls = $this->parseSQL(MODULESDIR . $module . '/.schema');

        if (is_array($sqls) && count($sqls) > 0) {
            $this->sqlsByModules[$module]['schema'] = $this->parsedSQLToArray($sqls);
            $this->allSqls = array_merge_recursive($this->allSqls, $sqls);
        }
        if ($getFormDB) {
            foreach ($sqls['create'] as $table=>$data) {
                $tmpname = tempnam('/tmp', 'dump');
                $cmd = sprintf("%s --no-create-db --no-create-info --compact -h%s -u%s -p%s %s %s >%s", $this->iniDirectives['MYSQLDUMP_EXECUTABLE'], DB_SERVER, DB_USER, DB_PASSWORD, DB_SCHEMA, $table, $tmpname);
                exec($cmd, $buf, $ret);
                $this->dumpFile .= file_get_contents($tmpname);
                @unlink($tmpname);
            }
        } elseif (file_exists(MODULESDIR . $module . '/.dump')) {
            $dumpFileContent = file_get_contents(MODULESDIR . $module . '/.dump') . ";\n\n";

            $this->sqlsByModules[$module]['dump'] = $dumpFileContent;
            $this->dumpSQLsBlocks[] = $dumpFileContent;
        }
    }

    /**
     * Saves of module's dump SQL data into the file.
     *
     * @param string $dumpFileName Dump file name.
     */
    protected function saveDumpSQLs($dumpFileName)
    {
        echo 'Generate ' . $dumpFileName . "\n";

        // Don't forgetting about sorted SQLs.
        foreach ($this->dumpSQLsBlocks as $sql) {
            $this->dumpFile .= $sql . "\n";
        }

        file_put_contents($dumpFileName, $this->dumpFile);
    }

    /**
     * Saves of module's schema SQL data into the file.
     *
     * @param string $schemaFileName Schema file name.
     */
    function saveSchemaSQLs($schemaFileName)
    {
        echo 'Generate ' . $schemaFileName. "\n";
        if (isset($this->allSqls['create'])) {
            foreach ($this->allSqls['create'] as $table => $sqls) {
                foreach ($sqls as $sql) {
                    file_put_contents($schemaFileName, $sql . "\n", FILE_APPEND);
                    $this->moveDownRelatedDump($sql);
                }
            }
        }
        if (isset($this->allSqls['alter'])) {
            $arrs = [
                'constraint' => [],
                'modify' => [],
                'key' => [],
            ];
            $arr = [];
            array_walk($this->allSqls['alter'], function($item) use (&$arrs, &$arr) {
                array_walk($item, function($sql) use (&$arrs) {
                    if (preg_match('~ALTER TABLE(.*)\s+ADD CONSTRAINT~is', $sql)) {
                        $arrs['constraint'][] = $sql;
                    } else if (preg_match('~ALTER TABLE(.*)\s+MODIFY~is', $sql)) {
                        $arrs['modify'][] = $sql;
                    } else {
                        $arrs['key'][] = $sql;
                    }
                });
            });
            foreach ($arrs['key'] as $sql) {
                file_put_contents($schemaFileName, $sql . "\n", FILE_APPEND);
                $this->moveDownRelatedDump($sql);
            }
            foreach ($arrs['modify'] as $sql) {
                file_put_contents($schemaFileName, $sql . "\n", FILE_APPEND);
                $this->moveDownRelatedDump($sql);
            }
            foreach ($arrs['constraint'] as $sql) {
                file_put_contents($schemaFileName, $sql . "\n", FILE_APPEND);
                $this->moveDownRelatedDump($sql);
            }
        }
        if (isset($this->allSqls['view'])) {
            foreach ($this->allSqls['view'] as $table => $sqls) {
                foreach ($sqls as $sql) {
                    file_put_contents($schemaFileName, $sql . "\n", FILE_APPEND);
                }
            }
        }
        if (isset($this->allSqls['other'])) {
            foreach ($this->allSqls['other'] as $table=>$sqls) {
                foreach ($sqls as $sql) {
                    file_put_contents($schemaFileName, $sql . "\n", FILE_APPEND);
                }
            }
        }
    }

    function buildDumpOfAllModules($schemaFileName, $dumpFileName)
    {
        $this->allSqls = [];
        $this->dumpFile = '';
        $id = 1;
        $dir = new DirectoryIterator(MODULESDIR);
        foreach ($dir as $fileinfo) {
            if ($fileinfo->isDir() && !$fileinfo->isDot()) {
                $module = $fileinfo->getFilename();
                $this->collectSQLs($module, false);
                $add = 'any';
                switch ($module) {
                    case 'Auth':
                        $levels = '0';
                        break;
                    case 'Profile':
                        $levels = '10,50,100,1000';
                        break;
                    case 'Modules':
                    case 'Users':
                        $levels = '100,1000';
                        break;
                    case 'UsersGroups':
                    case 'UsersWhitelist':
                        $levels = '1000';
                        $add = 'zeus';
                        break;
                    default:
                        $levels = '100';
                        $add = 'admin';
                        break;
                }
                // add module
                $conf = json_decode(file_get_contents(MODULESDIR . '/' . $module . '/config.json'), true);
                $sql = "INSERT INTO cms_modules SET
                `m_id`=" . $id . ",
				`m_name`=" . $this->db->qstr($module) . ",
				`m_path`=" . $this->db->qstr($module) . ",
				`m_levels`='" . $levels . "',
				`m_active`='true'";
                $conf['Active'] = true;
                $conf['Path'] = $module;
                if (isset($conf['Panel'])) {
                    $sql .= ",`m_panel` = " . $this->db->qstr($conf['Panel']);
                }
                if (isset($conf['Description'])) {
                    $sql .= ",`m_description` = " . $this->db->qstr($conf['Description']);
                }
                $sql .= ",`m_settings` = " . $this->db->qstr(serialize($conf));
                // allow module to admin and zeus
                if ($add=='admin') {
                    $sql .= ";\nINSERT INTO cms_users_modules SET id=1, module_id=" . $id . ";\n";
                } elseif ($add=='zeus') {
                    $sql .= ";\nINSERT INTO cms_users_modules SET id=2, module_id=" . $id . ";\n";
                } else {
                    $sql .= ";\nINSERT INTO cms_users_modules SET id=1, module_id=" . $id . ";";
                    $sql .= "\nINSERT INTO cms_users_modules SET id=2, module_id=" . $id . ";\n";
                }
                $id++;
                $this->dumpFile .= $sql;
            }
        }
        $this->saveSchemaSQLs($schemaFileName);
        $this->saveDumpSQLs($dumpFileName);
    }

    function buildDumpOfActiveModules($schemaFileName, $dumpFileName)
    {
        $sql = 'SELECT * FROM cms_modules WHERE m_active="true"';
        if (($rows = $this->db->GetAll($sql))) {
            $this->allSqls = [];
            $this->dumpFile = '';
            foreach ($rows as $key=>$row) {
                $row['m_id'] = $key + 1;
                $this->collectSQLs($row['m_path'], true);
                unset($row['m_active']);
                $sql = "INSERT INTO cms_modules SET
				`m_id`=" . $this->db->qstr($row['m_id']) . ",
				`m_name`=" . $this->db->qstr($row['m_name']) . ",
				`m_path`=" . $this->db->qstr($row['m_path']) . ",
				`m_panel`=" . $this->db->qstr($row['m_panel']) . ",
				`m_description`=" . $this->db->qstr($row['m_description']) . ",
				`m_settings`=" . $this->db->qstr($row['m_settings']) . ",
				`m_levels`=" . $this->db->qstr($row['m_levels']) . ",
				`m_order`=" . $this->db->qstr($row['m_order']) . ",
				`m_active`='true';\n
				INSERT INTO cms_users_modules SET id=1, module_id=" . $this->db->qstr($row['m_id']) . ";\n";
                $this->dumpFile .= $sql;
            }
            $this->saveSchemaSQLs($schemaFileName);
            $this->saveDumpSQLs($dumpFileName);
        }
    }

    public function depluralize($word){
        $rules = [
            'ss' => false,
            'os' => 'o',
            'ies' => 'y',
            'xes' => 'x',
            'oes' => 'o',
            'ies' => 'y',
            'ves' => 'f',
            's' => ''
        ];
        foreach (array_keys($rules) as $key){
            if (substr($word, (strlen($key) * -1)) != $key) {
                continue;
            }
            if ($key === false) {
                return $word;
            }
            return substr($word, 0, strlen($word) - strlen($key)) . $rules[$key];
        }
        return $word;
    }

    public function initNewModule($data) {
        if( strtoupper (substr(PHP_OS, 0,3)) == 'WIN' ) {
            $this->parseDirectory(MODULESDIR . $data['name'], $data);
        } else {
            system("find " . MODULESDIR . $data['name'] . " -type f |xargs sed -i 's/__module_name__/" . $data['name'] . "/g;s/__table_name__/" . strtolower($data['table_name']) . "/g;s/__module_title__/" . $data['title'] . "/g;s/__description__/" . $data['description'] . "/g;s/__panel__/" . $data['panel'] . "/g;s/__date__/" . $data['date'] . "/g;s/__singular__/" . $data['singular'] . "/g;s/__build_version__/" . self::BCMSVERSION . "/g'");
        }
        rename(MODULESDIR . $data['name'] . "/__module_name__.php", MODULESDIR . $data['name'] . '/' . $data['name'] . '.php');
        if (file_exists(MODULESDIR . $data['name'] . '/Model/__singular__.php')) {
            rename(MODULESDIR . $data['name'] . '/Model/__singular__.php', MODULESDIR . $data['name'] . '/Model/' . $data['singular'] . '.php');
        }
        if (file_exists(MODULESDIR . $data['name'] . '/tests/__module_name__Test.php')) {
            rename(MODULESDIR . $data['name'] . '/tests/__module_name__Test.php', MODULESDIR . $data['name'] . '/tests/' . $data['name'] . 'Test.php');
        }
        if (isset($this->iniDirectives['MYSQL_EXECUTABLE'])) {
            if (file_exists(MODULESDIR . $data['name'] . '/.schema')) {
                $ans = $this->ask('Create new db table? (y/N) ');
                if ($ans === 'y') {
                    $cmd = sprintf("%s -h%s -u%s -p%s %s <%s", $this->iniDirectives['MYSQL_EXECUTABLE'], DB_SERVER, DB_USER, DB_PASSWORD, DB_SCHEMA, MODULESDIR . $data['name'] . '/.schema');
                    exec($cmd, $buf, $ret);
                    if (file_exists(MODULESDIR . $data['name'] . '/.dump')) {
                        $ans = $this->ask('Populate demo data? (y/N) ');
                        if ($ans === 'y') {
                            $cmd = sprintf("%s -h%s -u%s -p%s %s <%s", $this->iniDirectives['MYSQL_EXECUTABLE'], DB_SERVER, DB_USER, DB_PASSWORD, DB_SCHEMA, MODULESDIR . $data['name'] . '/.dump');
                            exec($cmd, $buf, $ret);
                        }
                    }
                }
            }
        }
    }

    public function parseDirectory($path='.', $data) {
        $dirTree = [];
        $global_path = str_replace('\\' , '/', realpath(basename(getenv('SCRIPT_NAME'))));
        $dirTreeTemp = [];
        $ignore[] = '.';
        $ignore[] = '..';
        $dh = @opendir($path);
        while (false !== ($file = readdir($dh))) {
            if (!in_array($file, $ignore)) {
                if (!is_dir($path . self::DS . $file)) {
                    $content = file_get_contents($path . self::DS . $file);
                    $content = str_replace('__module_name__', $data['name'], $content);
                    $content = str_replace('__table_name__', strtolower($data['name']), $content);
                    $content = str_replace('__module_title__', $data['title'], $content);
                    $content = str_replace('__description__', $data['description'], $content);
                    $content = str_replace('__panel__', $data['panel'], $content);
                    $content = str_replace('__date__', $data['date'], $content);
                    $content = str_replace('__singular__', $data['singular'], $content);
                    $content = str_replace('__build_version__', self::BCMSVERSION, $content);
                    $path = str_replace('\\' , self::DS, $path);
                    file_put_contents($path . self::DS . $file, $content);
                    $dirTree["$path"][] = $file;
                } else {
                    $dirTreeTemp = parseDirectory($path . self::DS . $file, $data);
                    if (is_array($dirTreeTemp))$dirTree = array_merge($dirTree, $dirTreeTemp);
                }
            }
        }
        closedir($dh);
        return $dirTree;
    }

    public function quitCmd()
    {
        return true;
    }

    public function helpCmd()
    {
        echo self::BANNER;
        echo <<<EOB
    help, h or ?        shows this help
    make                builds installation file
    gather              generate 'bumpcms_schema.sql' & 'bumpcms_dump.sql' form '.schema' and '.dump' files
    dump                dump used tables schema/data into ./bumpcms_schema.sql & ./bumpcms_dump.sql
    paths               current paths
    settings, s         current YAML settings
    group, g            users groups
    users, u            users controller
        Named parameters are: id, login, password, name, email, group, add, del
        Parameter 'group' is a `cms_users_groups`.`group_id` (1 for Administrator)
        Use add:=1 to add new user or del:=1 to delete user.
        To view/change any field  use 'id' parameter for identification.
        (NOTE! User's login can't be changed)
        List all available users if no parameters were defined
    password user newpassword   set user password.
    modules, mod, m     working with modules
    config, c           site settings
        Named parameters are: id, name, type, group, value, teaser, editable, empty.
        Parameter 'type' can be 'string','numeric','boolean','email','percents','multiselect'.
        Parameter 'group' is a `cms_config_groups`.`g_id`
        Use add:=1 to add new settings variable or del:=1 to delete it.
        To view/change any settings  use 'id' parameter for identification.
    cgroups, cg         config groups
    run, r              run module::method (for example 'run SiteTree::purgeCache' to purge cache)
    UP/DOWN keys        select prev/next command from history
    legal shell commands
    quit, exit, e, die, q   quit the shell

    bcmsshell can accept arguments (non interactive mode).
    Every command should be represented as quoted string (please note the nested quotes):

   ./bcmsshell gather
   ./bcmsshell mod 'generate path:=Notes table:=cms_notes title:="User Notes"' 'use Notes' 'c save:=1'

EOB;
        echo "\n";
    }

    public function pathsCmd()
    {
        $defs = [
            'HOMEDIR',
            'DOMAINDIR',
            'ENGINEDIR',
            'CACHE_DIR',
            'SESSION_PATH',
            'TMPDIR',
            'LIBRARYDIR',
            'TEMPLATESDIR',
            'MODULESDIR',
            'LAYOUTSDIR',
            'UPLOADPATH',
            'UPLOADDIR',
            'IMG_DIR',
            'IMG_LIBRARY',
            'FLASH_DIR',
            'FLASH_LIBRARY',
            'DOCS_DIR',
            'DOCS_LIBRARY',
            'MEDIA_DIR',
            'MEDIA_LIBRARY'
        ];
        $maxLen = 0;
        $paths = [];
        foreach ($defs as $def) {
            if (defined($def)) {
                $maxLen = max($maxLen, strlen($def));
                $paths[] = $def;
            }
        }
        echo "\n" . str_pad('Constant', $maxLen + 5) . '   Directory';
        echo "\n" . str_pad('--------', $maxLen + 5) . '   ---------';
        foreach ($paths as $path) {
            echo "\n" . str_pad($path, $maxLen + 5) . ' - ' . constant($path);
        }
        echo "\n";
    }

    public function groupsCmd()
    {
        $sql = 'SELECT * FROM cms_users_groups ORDER BY user_level DESC';
        if ($rows = $this->db->GetAll($sql)) {
            echo "\n" . str_pad('ID', 5) . str_pad('Group', 15) . '  ' . str_pad('Level', 15) . ' ' . str_pad('Active', 30);
            echo "\n" . str_pad('--', 5) . str_pad('-----', 15) . '  ' . str_pad('-----', 15) . ' ' . str_pad('------', 30);
            foreach ($rows as $row) {
                echo "\n" . str_pad($row['group_id'], 5) . str_pad($row['user_group'], 15) . '  ' . str_pad($row['user_level'], 15) . ' ' . str_pad($row['group_active'], 30);
            }
            echo "\n\n";
        }
    }

    public function usersCmd()
    {
        $ident = false;
        $sqlFields = [];
        $slqParams = [];
        if (isset($this->pairs['name'])) {
            $sqlFields[] = 'user_name=?';
            $sqlParams[] = $this->pairs['name'];
        }
        if (isset($this->pairs['email'])) {
            $sqlFields[] = 'user_email=?';
            $sqlParams[] = $this->pairs['email'];
        }
        if (isset($this->pairs['login'])) {
            $sqlFields[] = 'user_login=?';
            $sqlParams[] = $ident = $this->pairs['login'];
        }
        if (isset($this->pairs['password'])) {
            $sqlFields[] = 'user_password= ?';
            $sqlParams[] = password_hash($this->pairs['password'], PASSWORD_DEFAULT);
        }
        if (isset($this->pairs['id'])) {
            $ident = $this->pairs['id'];
        }
        if (isset($this->pairs['group'])) {
            $sqlFields[] = 'ug_id=?';
            $sqlParams[] = $this->pairs['group'];
        }
        if (isset($this->pairs['add'])) {
            $sql = 'INSERT INTO cms_users SET ' . implode(',', $sqlFields);
            $this->db->Execute($sql, $sqlParams);
            return;
        }
        if (!$ident) {
            $sql = 'SELECT * FROM cms_users ORDER BY user_id';
            if ($rows = $this->db->GetAll($sql)) {
                echo "\n" . str_pad('ID', 5) . str_pad('Login', 15) . ' ' . str_pad('Name', 15) . ' ' . str_pad('Email', 30) . ' Group';
                echo "\n" . str_pad('--', 5) . str_pad('-----', 15) . ' ' . str_pad('----', 15) . ' ' . str_pad('-----', 30) . ' -----';
                foreach ($rows as $row) {
                    echo "\n" . str_pad($row['user_id'], 5) . str_pad($row['user_login'], 15) . ' ' . str_pad($row['user_name'], 15) . ' ' . str_pad($row['user_email'], 30) . ' ' . $row['ug_id'];
                }
                echo "\n\n";
            }
        } else {
            $sqlParams[] = $ident;
            if (isset($this->pairs['del'])) {
                $sql = 'DELETE FROM cms_users WHERE user_id=?';
                $this->db->Execute($sql, intval($ident));
            } else {
                array_push($sqlParams, $ident);
                $sql = 'UPDATE cms_users SET ' . implode(',', $sqlFields) . ' WHERE user_id=?';
                $this->db->Execute($sql, $sqlParams);
            }
        }
    }

    public function passwordCmd()
    {
        if (count($this->inputs) > 1) {
            $sql = 'UPDATE cms_users SET user_password= ? WHERE user_login= ?';
            if ($this->db->Execute($sql, [password_hash($this->inputs[1], PASSWORD_DEFAULT), $this->inputs[0]]) === false) {
                echo $this->db->ErrorMsg();
            } else {
                echo "\n new password for user " . $this->inputs[0] . " was saved\n";
            }
        } else {
            echo "\n command password should have parameters. " . self::TYPEHELP;
        }
    }

    public function settingsCmd()
    {
        ob_start();
        //print_r($this->config);
        $res = ob_get_contents();
        ob_end_clean();
        echo $res;
    }

    public function runCmd()
    {
        $parts = explode('::', $this->inputs[0]);
        if (count($parts) == 2) {
            $module = '\\Bump\\Modules\\' . $parts[0] . '\\' . $parts[0];
            $action = $parts[1];
            if (class_exists($module)) {
                $obj = new $module;
                if (method_exists($obj, $action)) {
                    $res =  $obj->$action();
                }
            }
            if (is_string($res)) {
                echo "\n" . $res . "\n\n";
            } else {
                print_r($res);
            }
        }
    }

    public function configCmd()
    {
        $ident = false;
        $sqlFields = [];
        $slqParams = [];
        if (isset($this->pairs['name'])) {
            $sqlFields[] = '`name`=?';
            $sqlParams[] = $this->pairs['name'];
        }
        if (isset($this->pairs['type'])) {
            $sqlFields[] = '`type`=?';
            $sqlParams[] = $this->pairs['type'];
        }
        if (isset($this->pairs['value'])) {
            $sqlFields[] = '`value`=?';
            $sqlParams[] = $this->pairs['value'];
        }
        if (isset($this->pairs['teaser'])) {
            $sqlFields[] = '`teaser`=?';
            $sqlParams[] = $this->pairs['teaser'];
        }
        if (isset($this->pairs['editable'])) {
            $sqlFields[] = '`editable`=?';
            $sqlParams[] = $this->pairs['editable'];
        }
        if (isset($this->pairs['empty'])) {
            $sqlFields[] = '`empty`=?';
            $sqlParams[] = $this->pairs['empty'];
        }
        if (isset($this->pairs['id'])) {
            $ident = $this->pairs['id'];
        }
        if (isset($this->pairs['group'])) {
            $sqlFields[] = '`g_id`=?';
            $sqlParams[] = $this->pairs['group'];
        }
        if (isset($this->pairs['add'])) {
            $sql = 'INSERT INTO cms_configs SET ' . implode(',', $sqlFields);
            $this->db->Execute($sql, $sqlParams);
            return;
        }
        if (!$ident) {
            $sql = 'SELECT c.*, cg.g_name FROM cms_configs c INNER JOIN cms_config_groups cg USING (g_id) ORDER BY c.g_id, c.id';
            if ($rows = $this->db->GetAll($sql)) {
                echo "\n" . str_pad('ID', 5) . str_pad('Grp', 5) . '  ' . str_pad('Group Name', 15) . '  ' . str_pad('Variable', 20) . ' ' . str_pad('Type', 10) . ' ' . str_pad('Empty', 6) . ' ' . str_pad('Value', 30) . ' Teaser';
                echo "\n" . str_pad('--', 5) . str_pad('---', 5) . '  ' . str_pad('----------', 15) . '  ' . str_pad('--------', 20) . ' ' . str_pad('----', 10) . ' ' . str_pad('-----', 6) . ' ' . str_pad('-----', 30) . ' ------';
                foreach ($rows as $row) {
                    echo "\n" . str_pad($row['id'], 5) . str_pad($row['g_id'], 5) . '  ' . str_pad($row['g_name'], 15) . '  ' . str_pad($row['name'], 20) . ' ' . str_pad($row['type'], 10) . ' ' . str_pad($row['empty'], 6) . ' ' . str_pad($row['value'], 30) . ' ' . $row['teaser'];
                }
                echo "\n\n";
            }
        } else {
            $sqlParams[] = $ident;
            if (isset($this->pairs['del'])) {
                $sql = 'DELETE FROM cms_configs WHERE id=?';
                $this->db->Execute($sql, intval($ident));
            } else {
                $sql = 'UPDATE cms_configs SET ' . implode(',', $sqlFields) . ' WHERE id=?';
                $this->db->Execute($sql, $sqlParams);
            }
        }
    }

    public function cgroupsCmd()
    {
        $ident = false;
        $group = '';
        if (isset($this->pairs['name'])) {
            $group = $this->pairs['name'];
        }
        if (isset($this->pairs['id'])) {
            $ident = intval($this->pairs['id']);
        }
        if (isset($this->pairs['add'])) {
            $sql = 'INSERT INTO cms_config_groups SET g_name=?';
            $this->db->Execute($sql, $group);
            return;
        }
        if (!$ident) {
            $sql = 'SELECT * FROM cms_config_groups ORDER BY g_id';
            if ($rows = $this->db->GetAll($sql)) {
                echo "\nID   Group Name";
                echo "\n--   ----------";
                foreach ($rows as $row) {
                    echo "\n" . str_pad($row['g_id'], 5) . str_pad($row['g_name'], 5);
                }
                echo "\n\n";
            }
        } else {
            if (isset($this->pairs['del'])) {
                $sql = 'DELETE FROM cms_config_groups WHERE g_id=?';
                $this->db->Execute($sql, $ident);
            } else {
                $sql = 'UPDATE cms_config_groups SET g_name=? WHERE g_id=?';
                $this->db->Execute($sql, [$group, $ident]);
            }
        }
    }

    public function gatherCmd()
    {
        $schemaFileName = './'. self::ARCHNAME . '_schema.sql';
        $dumpFileName = './' . self::ARCHNAME . '_dump.sql';

        @unlink($schemaFileName);
        @unlink($dumpFileName);

        $this->buildDumpOfAllModules($schemaFileName, $dumpFileName);
    }

    public function dumpCmd()
    {
        $schemaFileName = './'. self::ARCHNAME . '_schema.sql';
        $dumpFileName = './' . self::ARCHNAME . '_dump.sql';

        @unlink($schemaFileName);
        @unlink($dumpFileName);

        $this->buildDumpOfActiveModules($schemaFileName, $dumpFileName);
    }

    public function makeCmd()
    {
        if (!isset($this->iniDirectives['create']) || !isset($this->iniDirectives['file']) || !isset($this->iniDirectives['dir'])) {
            echo "Can't read [Sources] from " . __DIR__ . "/.bcmsshell\n";
            return;
        }
        $base = __DIR__;
        $create = $this->iniDirectives['create'];
        $src = $this->iniDirectives['dir'];
        $files = $this->iniDirectives['file'];
        $dst = '/tmp/' . self::ARCHNAME;
        if (is_dir($dst)) {
            if (!$this->remove($dst)) {
                echo "Can't remove directory: " . $dst . "\n";
                return;
            }
        }
        if (!mkdir($dst)) {
            echo "Can't make directory: " . $dst . "\n";
            return;
        }
        chmod($dst, 0755);
        array_push($create, $this->iniDirectives['DOCUMENTROOTDIR'], $this->iniDirectives['DOCUMENTROOTDIR'] . '/modules');
        foreach ($create as $dir) {
            echo 'Creating ' . $dst . '/' . $dir . "\n";
            if (is_dir($dst . '/' . $dir)) {
                continue;
            }
            if (!mkdir($dst . '/' . $dir, 0755, true)) {
                echo "Can't make directory: " . $dst . '/' . $dir . "\n";
                return;
            }
            chmod($dst . '/' . $dir, 0755);
        }
        @passthru("find . -type f -iname '*~'|xargs rm -rf 1>/dev/null");
        array_push($files, 'engine');
        foreach ($files as $entry) {
            echo 'Copy ' . $base . '/' . $entry . "\n";
            if (preg_match('~(.*)\*$~', $entry, $mm)) {
                $realPath = rtrim(realpath($base . '/' . $mm[1]), self::DS) . self::DS;
                if ($d = @scandir($realPath)) {
                    foreach ($d as $name) {
                        if ($name != '.' && $name != '..' && is_file($realPath . $name)) {
                            if (!copy($realPath . $name, $dst . '/' . $this->iniDirectives['DOCUMENTROOTDIR'] . '/' . $name)) {
                                echo "Can't copy file " . $realPath . $name . ' to ' . $dst . '/' . $this->iniDirectives['DOCUMENTROOTDIR'] . '/' . $name . "\n";
                            }
                        }
                    }
                }
            } else {
                !$this->copy($base . '/' . $entry, $dst . '/' . $entry);
            }
        }
        foreach ($src as $entry) {
            echo 'Copy ' . $base . $entry . "\n";
            $this->copy($base . $entry, $dst . $entry);
        }
        $json = json_decode(file_get_contents($this->iniDirectives['SETTINGSDIR'] . '/config.json'), true);
        $json = array_replace($json, array(
            'Domain' => 'http://_new_host_',
            'Base' => '/',
            'DB' => array(
                'Platform' => 'mysqli',
                'Server' => '_db_server_',
                'User' => '_db_user_',
                'Password' => '_db_password_',
                'Schema' => '_db_name_'
            )
        ));
        $json = json_encode($json, JSON_PRETTY_PRINT);
        file_put_contents($dst . '/' . $this->iniDirectives['SETTINGSDIR'] . '/config.json', $json);
        chmod($dst . '/' . $this->iniDirectives['SETTINGSDIR'] . '/config.json', 0644);
        $schemaFileName = '/tmp/' . self::ARCHNAME . '/'. self::ARCHNAME . '_schema.sql';
        $dumpFileName = '/tmp/' . self::ARCHNAME . '/' . self::ARCHNAME . '_dump.sql';
        $modules = $this->buildDumpOfActiveModules($schemaFileName, $dumpFileName);
        foreach ($modules as $entry) {
            echo 'Copy ' . $base . '/' . $this->iniDirectives['DOCUMENTROOTDIR'] . '/modules/'. $entry . "\n";
            $this->copy($base . '/' . $this->iniDirectives['DOCUMENTROOTDIR'] . '/modules/' . $entry, $dst . '/' . $this->iniDirectives['DOCUMENTROOTDIR'] . '/modules/' . $entry);
        }
        $rev = $revDate = '';
        $res = exec('svn info', $info);
        if (is_array($info)) {
            foreach ($info as $line) {
                if (preg_match('/^Last Changed Rev:/i', $line)) {
                    $parts = explode(':', $line);
                    $rev = trim($parts[1]);
                } else if (preg_match('/^Last Changed Date:\s+(.*?)\((.*?)/i', $line, $mm)) {
                    $revDate = trim($mm[1]);
                }
            }
        }
        $archName = self::ARCHNAME . '-' . self::BCMSVERSION;
        if ($rev) {
            $archName = $archName . '-' . $rev;
        }
        $tmpname = tempnam(self::DS . 'tmp', 'stub_installer_');
        file_put_contents($tmpname, base64_decode(self::INSTALLER_STUB));
        $zip = new ZipArchive;
        if ($zip->open($tmpname) === true) {
            $zip->extractTo($dst . '/' . $this->iniDirectives['DOCUMENTROOTDIR'] . '/installer');
            $zip->close();
        }
        unlink($tmpname);
        $arch = __DIR__ . self::DS . $archName . '.tar.gz';
        echo 'Make ' . $archName . '.tar.gz' . "\n";
        if (file_exists($arch)) {
            if (!unlink($arch)) {
                echo "Can't delete " . $arch . "\n";
            }
        }
        @passthru('cd ' . $dst. '; tar czf ' . $arch . ' . 1>/dev/null');
        if (file_exists($arch)) {
            chmod($arch, 0644);
        }
        exec('which bzip2 2>/dev/null', $info, $res);
        if (!$res) {
            $arch = __DIR__ . self::DS . $archName . '.tar.bz2';
            echo 'Make ' . $archName . '.tar.bz2' . "\n";
            if (file_exists($arch)) {
                if (!unlink($arch)) {
                    echo "Can't delete " . $arch . "\n";
                }
            }
            @passthru('cd ' . $dst . '; tar cjf ' . $arch . ' . 1>/dev/null');
            if (file_exists($arch)) {
                chmod($arch, 0644);
            }
        }
        exec('which zip 2>/dev/null', $info, $res);
        if (!$res) {
            $arch = __DIR__ . self::DS . $archName . '.zip';
            echo 'Make ' . $archName . '.zip' . "\n";
            if (file_exists($arch)) {
                if (!unlink($arch)) {
                    echo "Can't delete " . $arch . "\n";
                }
            }
            @passthru('cd ' . $dst . '; zip -r9 ' . $arch . ' . 1>/dev/null');
            if (file_exists($arch)) {
                chmod($arch, 0644);
            }
        }
        exec('which rar 2>/dev/null', $info, $res);
        if (!$res) {
            $arch = __DIR__ . self::DS . $archName . '.rar';
            echo 'Make ' . $archName . '.rar' . "\n";
            if (file_exists($arch)) {
                if (!unlink($arch)) {
                    echo 'Can\'t delete ' . $arch . "\n";
                }
            }
            @passthru('cd ' . $dst . '; rar a -r ' . $arch . ' . 1>/dev/null');
            if (file_exists($arch)) {
                chmod($arch, 0644);
            }
        }
        echo "Clear temp files\n";
        $this->remove($dst);
        echo "Done\n";
    }

    public function modulesCmd()
    {
        readline_add_history($this->line);

        $this->prompt = 'modules';

        if (!$this->argc) {
            echo "\nModules. " . self::TYPEHELP;
        }
    }

    public function quitModulesCmd()
    {
        return true;
    }

    public function exitModulesCmd()
    {
        $this->prompt = $this->module = '';
    }

    public function helpModulesCmd()
    {
        echo self::BANNER;
        echo <<<EOB
    Some commands can access named parameters. Parameter name is a single word (token).
    Parameter value can be quoted or unquoted. Several parameters are separated by space:

	command title:=some title  name:="temporary name"  active:=true  save:=1

    See available named parameters in command description.


    help, h or ?		shows this help
    list, lst, l		list available modules (directories)
        Named parameters are: sort, order
        Parameter 'sort' can be 'state', 'path' or 'title' and
        parameter 'order' can be 'asc' or 'desc'.
        Default is sort:=path order:=asc

    use name			set current module
    generate path table		generate module (simple ExtJS grid/editor)
        Named parameters are: path, table, title, panel, description
        Parameter table is a name of existing DB table.
        Panel type is default 'hidden'
    create path			create module stub
        Named parameters are: path, type, title, panel, description
        Parameter type can be inner type - 'grid', 'tree', 'helper' or
        stub dir name defined by STUB_DIR variable in .bcmsshell INI file.
        Default is 'grid'.
        Panel type is default 'hidden'
    schema table		generate MySQL table schema file
        Named parameters are: table, save
    config, c			view config
        Named parameters are: levels, save
    delete, del			delete config record (deactivate module)
    clear, clr			delete orphan records
    kill, k			delete module (directory)
    UP/DOWN keys		select prev/next command from history
    legal shell commands
    exit, e			exit modules
    quit, die, q		quit the shell
EOB;
        echo "\n";
    }

    public function generateModulesCmd()
    {
        if (!count($this->inputs)) {
            echo self::TYPEHELP;
            return;
        }
        $table = '';
        $type = 'grid';
        $panel = 'hidden';
        $date = date('r');
        $title = $description = $name = $this->inputs[0];
        if (isset($this->pairs['path'])) {
            $title = $description = $name = ucfirst($this->pairs['path']);
        }
        if (isset($this->pairs['table'])) {
            $table = $this->pairs['table'];
        }
        if (isset($this->pairs['title'])) {
            $title = $description = $this->pairs['title'];
        }
        if (isset($this->pairs['description'])) {
            $description = $this->pairs['description'];
        }
        if (isset($this->pairs['panel'])) {
            $panel = $this->pairs['panel'];
        }
        if (is_dir(MODULESDIR . $name)) {
            echo "\nmodule " . $name . " is already exists\n";
        } elseif (!$table) {
            echo "\nError! Please give me the table name\n\n";
        } else {
            $stub = self::MODULE_GEN_GRID_STUB;
            $singular = $this->depluralize($name);
            if ($singular == $name) {
                echo "\nError! Please set module name in plural\n\n";
                return;
            }
            mkdir(MODULESDIR . $name);
            $data = ['name' => $name, 'table_name' => $table, 'type' => $type, 'title' => $title, 'description' => $description, 'panel' => $panel, 'date' => $date, 'singular' => $singular];
            $tmpname = tempnam(self::DS . 'tmp', 'stub_');
            file_put_contents($tmpname, base64_decode($stub));
            $zip = new ZipArchive;
            if ($zip->open($tmpname) === true) {
                $zip->extractTo(MODULESDIR . $name);
                $zip->close();
                $this->initNewModule($data);
                $sql = "SHOW CREATE TABLE {$table}";
                $row = $this->db->GetRow($sql);
                $schema = $row['Create Table'];
                file_put_contents(MODULESDIR . $name . '/.schema', $row['Create Table'].';');
                $sql = 'SHOW FIELDS FROM '. $table;
                $fields = $this->db->GetAll($sql);
                $columns = [];
                $labels = [];
                $editors = [];
                foreach ($fields as $field) {
                    if ($field['Field']=='id') {
                        $editors[] = "
{
    xtype: 'hiddenfield',
    name: 'id'
}";
                    } elseif (substr($field['Type'], 0, 5) == 'enum(') {
                        if (preg_match_all("/('(.*?)')+/i", $field['Type'], $mm)) {
                            if (count($mm[2])==2 && in_array('true', $mm[2]) && in_array('false', $mm[2])) {
                                $columns[] = "
{
    header: __." . $field['Field'] . ",
    sortable: false,
    dataIndex: '" . $field['Field'] . "',
    width: 100,
    fixed: true,
    editor: {
        xtype: 'enumtruefalsecombo'
    },
    filter: {
        type: 'boolean'
    }
}";
                                $editors[] = "
{
    xtype: 'enumtruefalsecombo',
    fieldLabel: __." . $field['Field'].",
    hiddenName: '" . $field['Field']."',
    name: '" . $field['Field']."'
}";
                            } else {
                                $data = [];
                                foreach (array_values($mm[2]) as $val) {
                                    $data[] = [$val, $val];
                                }
                                $columns[] = "
{
    header: __." . $field['Field'] . ",
    sortable: false,
    dataIndex: '" . $field['Field'] . "',
    flex: 1,
    sortable: false,
    editor: {
        xtype: 'commoncombo',
        data: " . json_encode($data) . "
    },
    filter: {
        type: 'list',
        phpMode: true,
        options: " . json_encode($data) . "
    }
}";
                                $editors[] = "
{
    xtype: 'commoncombo',
    fieldLabel: __." . $field['Field'] . ",
    name: '" . $field['Field'] . "',
    data: " . json_encode($data) . "
}";
                            }
                        }
                    } else {
                        $ftype = substr($field['Type'], 0, 4) == 'int(' ? 'numeric' : 'string';
                        if (substr($field['Type'], 0, 4) == 'int(') {
                            $columns[] = "
{
    header: __." . $field['Field'].",
    dataIndex: '" . $field['Field']."',
    filter: {
        type: 'numeric'
    }
}";
                            $editors[] = "
{
    xtype: 'numberfield',
    fieldLabel: __." . $field['Field'].",
    name: '" . $field['Field']."'
    /*

uncomment to allow min/max values

    ,minValue: 0
    ,maxValue: 100

    */
}";
                        } elseif (substr($field['Type'], 0, 4) == 'text') {
                            $columns[] = "
{
    header: __." . $field['Field'] . ",
    flex: 1,
    sortable: false,
    dataIndex: '" . $field['Field'] . "',
    filter: {
        type: 'string'
    }
}";
                            $editors[] = "
{
    xtype: 'wysiwygeditor',
    fieldLabel: __." . $field['Field'] . ",
    name: '" . $field['Field'] . "',
    height: 400,
    anchor: '90%'
}";
                        } elseif (in_array($field['Type'], ['date', 'datetime', 'timestamp'])) {
                            $columns[] = "
{
    header: __." . $field['Field'] . ",
    width: 100,
    fixed: true,
    dataIndex: '" . $field['Field'] . "',
    filter: {
        type: 'date',
        dateFormat: __.revision_date_format
    }
}";
                            $editors[] = "
{
    xtype: 'datefield',
    fieldLabel: __." . $field['Field'] . ",
    name: '" . $field['Field'] . "',
    format: __.revision_date_format
}";
                        } else {
                            $columns[] = "
{
    header: __." . $field['Field'] . ",
    dataIndex: '" . $field['Field'] . "',
    filter: {
        type: 'string'
    }
}";
                            $editors[] = "
{
    xtype: 'textfield',
    fieldLabel: __." . $field['Field'] . ",
    name: '" . $field['Field'] . "',
    anchor: '90%'
}";
                        }
                    }
                    $labels[] = $field['Field'] . ': "'. $field['Field']. '"';
                }
                $text = file_get_contents(MODULESDIR . $name . '/ux/Grid.js');
                $text = str_replace('__columns__', implode(',', $columns), $text);
                file_put_contents(MODULESDIR . $name . '/ux/Grid.js', $text);
                $text = file_get_contents(MODULESDIR . $name . '/ux/Editor.js');
                $text = str_replace('__editors__', implode(',', $editors), $text);
                file_put_contents(MODULESDIR . $name . '/ux/Editor.js', $text);
                $text = file_get_contents(MODULESDIR . $name . '/ux/lang/En.lng');
                $text = str_replace('__labels__', implode("\n", $labels), $text);
                file_put_contents(MODULESDIR . $name . '/ux/lang/En.lng', $text);
                echo "\nmodule " . $name . " stub was successfully created\n";
            } else {
                echo "\ncreating stub failed\n";
            }
            unlink($tmpname);
        }
    }

    public function createModulesCmd()
    {
        if (!count($this->inputs)) {
            echo self::TYPEHELP;
            return;
        }
        $type = 'grid';
        $panel = 'hidden';
        $date = date('r');
        $title = $description = $name = $this->inputs[0];
        if (isset($this->pairs['path'])) {
            $title = $description = $name = ucfirst($this->pairs['path']);
        }
        if (isset($this->pairs['type'])) {
            $type = $this->pairs['type'];
        }
        if (isset($this->pairs['title'])) {
            $title = $description = $this->pairs['title'];
        }
        if (isset($this->pairs['description'])) {
            $description = $this->pairs['description'];
        }
        if (isset($this->pairs['panel'])) {
            $panel = $this->pairs['panel'];
        }
        if (is_dir(MODULESDIR . $name)) {
            echo "\nmodule " . $name . " is already exists\n";
        } else {
            $singular = $this->depluralize($name);
            if ($type != 'helper' && $singular == $name) {
                echo "\nError! Please set module name in plural\n\n";
                return;
            }
            mkdir(MODULESDIR . $name);
            $data = ['name' => $name, 'table_name' => $name, 'type' => $type, 'title' => $title, 'description' => $description, 'panel' => $panel, 'date' => $date, 'singular' => $singular];
            $external = false;
            if (isset($this->iniDirectives['STUB_DIR'])) {
                $sdir = $this->iniDirectives['STUB_DIR'];
                if (substr($sdir, 0, 1) != '.') {
                    $sdir = __DIR__ . self::DS . $sdir;
                }
                if (is_dir($sdir)) {
                    $d = dir($this->iniDirectives['STUB_DIR']);
                    while($dname = $d->read()){
                        if ($dname == $type && is_dir($this->iniDirectives['STUB_DIR'] . self::DS . $type) && file_exists($this->iniDirectives['STUB_DIR'] . self::DS . $type . self::DS . 'config.json')) {
                            $external = true;
                            return;
                        }
                    }
                    $d->close();
                }
            }
            if ($external) {
                $this->copy($this->iniDirectives['STUB_DIR'] . self::DS . $type, MODULESDIR . $name);
                $this->initNewModule($data);
                echo "\nmodule " . $name . " stub was successfully created\n";
            } else {
                switch ($type) {
                    case 'tree':
                        $stub = self::MODULE_TREE_STUB;
                        break;
                    case 'helper':
                        $stub = self::MODULE_HELPER_STUB;
                        break;
                    case 'grid':
                        $stub = self::MODULE_GRID_STUB;
                        break;
                    default:
                        $stub = '';
                        break;
                }
                if ($stub) {
                    $tmpname = tempnam(self::DS . 'tmp', 'stub_');
                    file_put_contents($tmpname, base64_decode($stub));
                    $zip = new ZipArchive;
                    if ($zip->open($tmpname) === true) {
                        $zip->extractTo(MODULESDIR.$name);
                        $zip->close();
                        $this->initNewModule($data);
                        echo "\nmodule " . $name . " stub was successfully created\n";
                    } else {
                        echo "\ncreating stub failed\n";
                    }
                    unlink($tmpname);
                } else {
                    echo "\ncreating stub failed, unknown type '" . $type . "'\n";
                }
            }
        }
    }

    public function listModulesCmd()
    {
        $sort = 'path';
        $order = 'asc';
        $modules = [];
        $names = [];
        $maxLen = 0;
        try {
            $d = dir(MODULESDIR);
            while($name = $d->read()){
                if (substr($name, 0, 1) != '.' && is_dir(MODULESDIR . $name)) {
                    $names[] = $name;
                    $fn = file_exists(MODULESDIR . $name . self::DS . 'config.json') ? MODULESDIR . $name . self::DS . 'config.json' : '';
                    if ($fn) {
                        $config = json_decode(file_get_contents($fn), true);
                        $config['Path'] = $name;
                    } else {
                        $config['Path'] = $config['Title'] = $name;
                    }
                    $config['state'] = '-';
                    $sql = 'SELECT IF(m_active="true", "A", "I") active, m_levels FROM cms_modules WHERE m_path=?';
                    if (($row = $this->db->GetRow($sql, $name))) {
                        $config['state'] = $row['active'];
                        $config['Levels'] = $row['m_levels'];
                    }
                    $maxLen = max($maxLen, strlen($name));
                    $modules[] = $config;
                }
            }
            $d->close();
            if ($this->cmd == 'clear' || $this->cmd == 'clr') {
                $sql = 'DELETE FROM cms_modules WHERE m_path NOT IN ("' . implode('","', $names) . '")';
                $this->db->Execute($sql);
                echo "\norphans were cleared\n";
                return;
            }
            $sql = 'SELECT * FROM cms_modules WHERE m_path NOT IN ("' . implode('","', $names) . '")';
            if (($rows = $this->db->GetAll($sql))) {
                foreach ($rows as $row) {
                    $config['state'] = '?';
                    $config['Path'] = $config['Title'] = $row['m_path'];
                    $cfg = unserialize($row['m_settings']);
                    if (isset($cfg['Title'])) {
                        $config['Title'] = $cfg['Title'];
                    }
                    $modules[] = $config;
                }
            }
        } catch (Exception $e) {
            echo "\n" . $e->getMessage() . "\n";
            return;
        }
        if (isset($this->pairs['sort']) && in_array($this->pairs['sort'], array('state', 'path', 'title'))) {
            $sort = $this->pairs['sort'];
        }
        if (isset($this->pairs['order']) && in_array($this->pairs['order'], array('asc', 'desc'))) {
            $order = $this->pairs['order'];
        }
        usort($modules, 'sort_' . $sort . '_' . $order);
        echo "\n" . str_pad('State Levels                Path', $maxLen+36) . 'Title';
        echo "\n" . str_pad('----- ------                ----', $maxLen+36) . '-----';
        foreach ($modules as $module) {
            echo "\n  " . $module['state'] . '   ' . str_pad($module['Levels'], $maxLen+5) . str_pad($module['Path'], $maxLen + 10) . $module['Title'];
        }
        echo "\n-------------\n 'A' is active\n 'I' is inactive\n '-' is deleted\n '?' is orphan\n";
    }

    public function useModulesCmd()
    {
        if (is_dir(MODULESDIR . $this->inputs[0])) {
            $this->module = $this->inputs[0];
        } else {
            echo "\nmodule " . $this->inputs[0] . " was not found\n";
        }
    }

    public function configModulesCmd()
    {
        if (!$this->module) {
            echo "\nset current module first. " . self::TYPEHELP;
        } else {
            if (isset($this->pairs['levels'])) {
                $levels = $this->pairs['levels'];
            } else {
                $levels = 100;
            }
            $fn = MODULESDIR . $this->module . self::DS . 'config.json';
            if (file_exists($fn)) {
                $conf = json_decode(file_get_contents($fn), true);
                if (isset($conf['Version'])) {
                    settype($conf['Version'], 'string');
                }
                if (isset($this->pairs['save']) && $this->pairs['save']) {
                    if (!$conf['Panel']) {
                        $conf['Panel'] = 'hidden';
                    }
                    try {
                        $fields = array(
                            'm_name' => $conf['Title'],
                            'm_path' => $this->module,
                            'm_description' => $conf['Description'],
                            'm_settings' => serialize($conf),
                            'm_panel' => $conf['Panel'],
                            'm_levels' => $levels,
                            'm_active' => 'true'
                        );
                        $this->db->Replace('cms_modules', $fields, 'm_path', true);
                        //$this->config->cache->flush();
                        if (is_file(MODULESDIR . $this->module . self::DS . '.schema')) {
                            $sqls = $this->parseSQL(MODULESDIR . $this->module . self::DS . '.schema');
                            $errors = 0;
                            $errorMessage = '';
                            if (isset($sqls['create'])) {
                                foreach ($sqls['create'] as $table=>$sqls) {
                                    if (!$this->db->getOne("SHOW TABLES LIKE '" . $table . "'")) {
                                        try {
                                            foreach ($sqls as $sql) {
                                                $this->db->Execute($sql);
                                            }
                                        } catch (Exception $e) {
                                            $errors++;
                                            $errorMessage .= "Table '" . $table . "' could not be created\n";
                                        }
                                    }
                                }
                            }
                            if (isset($sqls['alter'])) {
                                foreach ($sqls['alter'] as $table => $sqls) {
                                    try {
                                        foreach ($sqls as $sql) {
                                            $this->db->Execute($sql);
                                        }
                                    } catch (Exception $e) {
                                        $errors++;
                                        $errorMessage .= "Table '" . $table . "' could not be altered\n";
                                    }
                                }
                            }
                            if (isset($sqls['view'])) {
                                foreach ($sqls['view'] as $table => $sqls) {
                                    try {
                                        foreach ($sqls as $sql) {
                                            $this->db->Execute($sql);
                                        }
                                    } catch (Exception $e) {
                                        $errors++;
                                        $errorMessage .= "View '" . $table . "' could not be altered\n";
                                    }
                                }
                            }
                            if (isset($sqls['other'])) {
                                foreach ($sqls['other'] as $table => $sqls) {
                                    try {
                                        foreach ($sqls as $sql) {
                                            $this->db->Execute($sql);
                                        }
                                    } catch (Exception $e) {
                                        $errors++;
                                        $errorMessage .= "Processing '" . $table . "' error\n";
                                    }
                                }
                            }
                            if ($errors) {
                                echo 'Total ' . $errors . " errors\n";
                            }
                        }
                        echo "\nconfig was saved to DB\n";
                    } catch (exception $e) {
                        echo "\n" . $e->getMessage() . "\n";
                    }
                } else {
                    print_r($conf);
                }
            }
        }
    }

    public function schemaModulesCmd()
    {
        if (!$this->module) {
            echo "\nset current module first. " . self::TYPEHELP;
        } else if (!count($this->inputs)) {
            echo "\nspecify table name. " . self::TYPEHELP;
        } else {
            $table = $this->inputs[0];
            if (isset($this->pairs['table'])) {
                $table = $this->pairs['table'];
            }
            $sql = 'SHOW CREATE TABLE ' . $table;
            try {
                $row = $this->db->GetRow($sql);
                $content = "\nDROP TABLE IF EXISTS `" . $table . "`;\n";
                $content .= $row['Create Table'] . "\n";
                if (isset($this->pairs['save']) && $this->pairs['save']) {
                    file_put_contents(MODULESDIR . $this->module . self::DS . ".schema", $content, FILE_APPEND);
                    echo "\nschema file " . MODULESDIR . $this->module . self::DS . ".schema was successfully updated\n";
                } else {
                    echo "\n" . $content . "\n";
                }
            } catch (Exception $e) {
                echo $e->getMessage();
            }
        }
    }

    public function deleteModulesCmd()
    {
        if (!$this->module) {
            echo "\nset current module first. " . self::TYPEHELP;
        } else {
            try {
                $sql = 'DELETE FROM cms_modules WHERE m_path=?';
                $this->db->Execute($sql, $this->module);
                echo "\nmodule " . $this->module . " was deactivated.\nNB: this operation doesn't delete module directory.\n";
            } catch (Exception $e) {
                echo $e->getMessage();
            }
        }
    }

    public function killModulesCmd()
    {
        if (!$this->module) {
            echo "\nset current module first. " . self::TYPEHELP;
        } else {
            ob_start();
            $out = system("svn ls \"" . MODULESDIR . $this->module . "\" >/dev/null 2>&1", $ret);
            ob_end_clean();
            if (!$ret) {
                echo "\nmodule " . $this->module . " is under version control. operation aborted\n";
            } else {
                $sql = 'SELECT * FROM cms_modules WHERE m_path=?';
                if ($row = $this->db->getRow($sql, $this->module)) {
                    $set = unserialize($row['m_settings']);
                    if (isset($set['Core']) && $set['Core']) {
                        echo "\ncore modules can't be deleted. operation aborted\n";
                        return;
                    }
                }
                $ans = $this->ask('Are you sure you want to delete module ' . $this->module . ' ? (y/N) ');
                if ($ans === 'y') {
                    if (isset($this->iniDirectives['MYSQL_EXECUTABLE'])) {
                        if (file_exists(MODULESDIR . $this->module . self::DS . '.truncate')) {
                            $ans = $this->ask('Delete module db table(s)? (y/N) ');
                            if ($ans === 'y') {
                                $cmd = sprintf("%s -h%s -u%s -p%s %s <%s", $this->iniDirectives['MYSQL_EXECUTABLE'], DB_SERVER, DB_USER, DB_PASSWORD, DB_SCHEMA, MODULESDIR . $this->module . self::DS . '.truncate');
                                exec($cmd, $buf, $ret);
                                $sql = 'DELETE FROM cms_modules WHERE m_path=?';
                                $this->db->Execute($sql, $this->module);
                            }
                        }
                    }
                    if( strtoupper (substr(PHP_OS, 0,3)) == 'WIN' ) {
                        $dir = MODULESDIR . $this->module;
                        $dir = str_replace('/', '\\', $dir);
                        system('RMDIR "' . $dir . '" /s /q');
                    } else {
                        system('rm -rf "' . MODULESDIR . $this->module . '"');
                    }
                    echo "\nmodule " . $this->module . " was deleted\n";
                    $this->module = '';
                }
            }
        }
    }
}

new Shell($argv);
