<?php

namespace Bump\Core\Tests;

use Bump\Core\Sanitizer;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-27 at 13:08:52.
 */
class SanitizerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Sanitizer
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Sanitizer();
    }

    /**
     * @covers Bump\Core\Sanitizer::getTypedVar
     * @dataProvider provider
     */
    public function testGetTypedVar($result, $var, $type)
    {
        $this->assertEquals(
            $result,
            $this->object->getTypedVar($var, $type)
        );
    }

    public function testCard()
    {
        $foo = self::getMethod('luhnCheck');
        $this->assertEquals(true, $foo->invokeArgs(null, ['5610591081018250']));
        $this->assertEquals(false, $foo->invokeArgs(null, ['23456']));
        $this->assertEquals(false, $foo->invokeArgs(null, ['12ed5610591081018250']));
    }

    public function provider()
    {
        return [
            ['hello&<world>', 'hello&amp;&lt;world&gt;', 'html'],
            ['hello&amp;&quot;world&quot;', 'hello&"world"', 'text'],
            ['helloworld', 'hello&<world>!@#$%^&*()123',    'alpha'],
            ['helloworld123', 'hello&<world>!@#$%^&*()123', 'variable'],
            ['#bad_file.txt', '!!@@@#!bad_file?.txt', 'filename'],

            ['2010-05-03', '2010-05-03', 'date'],
            ['2010/05/03', '2010/05/03', 'date'],
            ['10-13-1990', '10-13-1990', 'date'],
            ['10/13/1990', '10/13/1990', 'date'],

            ['', '0000-05-03', 'date'],
            ['', '2010/00/03', 'date'],
            ['', '10*13*1990', 'date'],
            ['', '10#13/1#0', 'date'],

            ['00:00:00', '00:00:00', 'time'],
            ['23:59:55', '23:59:55', 'time'],
            ['', '23:59:69', 'time'],

            ['', '1899-01-01 00:00:00', 'datetime'],
            ['1990-10-13 07:00:00', '1990-10-13 07:00:00', 'datetime'],
            ['', '3000-01-01 00:00:00', 'datetime'],

            [13, '13', 'int'],
            [13, '13', 'integer'],

            [13.4, '13.4', 'float'],
            [13.4, '13.4', 'double'],

            ['', 'asjkldn', 'number'],
            [13, '13', 'number'],

            ['true', 'on', 'checkbox'],
            ['true', 'true', 'checkbox'],
            ['false', 'false', 'checkbox'],

            [true, 'true', 'boolean'],
            [false, 'false', 'boolean'],


            [[], 'string', 'array'],
            [[1, 2, 3], [1, 2, 3], 'array'],

            [(object)['a' => 1], '{"a": 1}', 'json'],
            [['a' => 1], '{"a": 1}', 'json_array'],

            ['example@example.com', 'example@example.com', 'email'],
            ['', 'example-example.com', 'email'],

            ['http://ya.ru', 'http://ya.ru', 'url'],
            ['https://ya.ru', 'https://ya.ru', 'url'],
            ['', 'example-example:com', 'url'],

            ['127.0.0.1', '127.0.0.1', 'ip'],
            ['', '127,0.0.1', 'ip'],

            ['Hello world!', 'Hello world!', 'string'],
            ['378282246310005', '378282246310005', 'ccard'],
            ['', 'фы', 'ccard'],
        ];
    }

    protected static function getMethod($name)
    {
        $class = new \ReflectionClass('Bump\Core\Sanitizer');
        $method = $class->getMethod($name);
        $method->setAccessible(true);

        return $method;
    }
}
